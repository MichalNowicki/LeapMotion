
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003734  08000000  08000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  20000000  08003734  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000128  20000110  20000110  00010110  2**2
                  ALLOC
  3 .stack        00000800  20000238  20000238  00010110  2**0
                  ALLOC
  4 .comment      0000002a  00000000  00000000  00010110  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00001360  00000000  00000000  00010140  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00002f18  00000000  00000000  000114a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000dcad  00000000  00000000  000143b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000272d  00000000  00000000  00022065  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000091d8  00000000  00000000  00024792  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00003d04  00000000  00000000  0002d96c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000544e  00000000  00000000  00031670  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006fc2  00000000  00000000  00036abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0074eb2a  00000000  00000000  0003da80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0078c5aa  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00001160  00000000  00000000  0078c5cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_pubtypes 00001169  00000000  00000000  0078d72f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__text_start>:
 8000000:	20000638 	.word	0x20000638
 8000004:	08000bb5 	.word	0x08000bb5
 8000008:	08000c09 	.word	0x08000c09
 800000c:	08000c09 	.word	0x08000c09
 8000010:	08000c09 	.word	0x08000c09
 8000014:	08000c09 	.word	0x08000c09
 8000018:	08000c09 	.word	0x08000c09
 800001c:	08000c09 	.word	0x08000c09
 8000020:	08000c09 	.word	0x08000c09
 8000024:	08000c09 	.word	0x08000c09
 8000028:	08000c09 	.word	0x08000c09
 800002c:	08000c09 	.word	0x08000c09
 8000030:	08000c09 	.word	0x08000c09
 8000034:	08000c09 	.word	0x08000c09
 8000038:	08000c09 	.word	0x08000c09
 800003c:	08000c09 	.word	0x08000c09
 8000040:	08000c09 	.word	0x08000c09
 8000044:	08000c09 	.word	0x08000c09
 8000048:	08000c09 	.word	0x08000c09
 800004c:	08000c09 	.word	0x08000c09
 8000050:	08000c09 	.word	0x08000c09
 8000054:	08000c09 	.word	0x08000c09
 8000058:	08000c09 	.word	0x08000c09
 800005c:	08000c09 	.word	0x08000c09
 8000060:	08000c09 	.word	0x08000c09
 8000064:	08000c09 	.word	0x08000c09
 8000068:	08000c09 	.word	0x08000c09
 800006c:	08000819 	.word	0x08000819
 8000070:	08000c09 	.word	0x08000c09
 8000074:	08000c09 	.word	0x08000c09
 8000078:	080008c9 	.word	0x080008c9
 800007c:	08000c09 	.word	0x08000c09
 8000080:	08000c09 	.word	0x08000c09
 8000084:	08000c09 	.word	0x08000c09
 8000088:	08000c09 	.word	0x08000c09
 800008c:	08000c09 	.word	0x08000c09
 8000090:	08000c09 	.word	0x08000c09
 8000094:	08000c09 	.word	0x08000c09
 8000098:	08000c09 	.word	0x08000c09
 800009c:	08000c09 	.word	0x08000c09
 80000a0:	08000c09 	.word	0x08000c09
 80000a4:	08000c09 	.word	0x08000c09
 80000a8:	08000c09 	.word	0x08000c09
 80000ac:	080007f1 	.word	0x080007f1
 80000b0:	08000c09 	.word	0x08000c09
 80000b4:	08000c09 	.word	0x08000c09
 80000b8:	08000c09 	.word	0x08000c09
 80000bc:	08000c09 	.word	0x08000c09
 80000c0:	08000c09 	.word	0x08000c09
 80000c4:	08000c09 	.word	0x08000c09
 80000c8:	08000c09 	.word	0x08000c09
 80000cc:	08000c09 	.word	0x08000c09
 80000d0:	08000c09 	.word	0x08000c09
 80000d4:	080007d1 	.word	0x080007d1
 80000d8:	08000c09 	.word	0x08000c09
 80000dc:	08000c09 	.word	0x08000c09
 80000e0:	08000c09 	.word	0x08000c09
 80000e4:	08000c09 	.word	0x08000c09
 80000e8:	08000c09 	.word	0x08000c09
 80000ec:	08000c09 	.word	0x08000c09
 80000f0:	08000c09 	.word	0x08000c09
 80000f4:	08000c09 	.word	0x08000c09
 80000f8:	08000c09 	.word	0x08000c09
 80000fc:	08000c09 	.word	0x08000c09
 8000100:	08000c09 	.word	0x08000c09
 8000104:	08000c09 	.word	0x08000c09
 8000108:	08000c09 	.word	0x08000c09
 800010c:	08000c09 	.word	0x08000c09
 8000110:	08000c09 	.word	0x08000c09
 8000114:	08000c09 	.word	0x08000c09
 8000118:	08000c09 	.word	0x08000c09
 800011c:	08000c09 	.word	0x08000c09
 8000120:	08000c09 	.word	0x08000c09
 8000124:	08000c09 	.word	0x08000c09
 8000128:	08000c09 	.word	0x08000c09
 800012c:	08000c09 	.word	0x08000c09

08000130 <__do_global_dtors_aux>:
 8000130:	f240 1310 	movw	r3, #272	; 0x110
 8000134:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000138:	781a      	ldrb	r2, [r3, #0]
 800013a:	b90a      	cbnz	r2, 8000140 <__do_global_dtors_aux+0x10>
 800013c:	2001      	movs	r0, #1
 800013e:	7018      	strb	r0, [r3, #0]
 8000140:	4770      	bx	lr
 8000142:	bf00      	nop

08000144 <frame_dummy>:
 8000144:	f240 1010 	movw	r0, #272	; 0x110
 8000148:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800014c:	b508      	push	{r3, lr}
 800014e:	6803      	ldr	r3, [r0, #0]
 8000150:	b12b      	cbz	r3, 800015e <frame_dummy+0x1a>
 8000152:	f240 0300 	movw	r3, #0
 8000156:	f2c0 0300 	movt	r3, #0
 800015a:	b103      	cbz	r3, 800015e <frame_dummy+0x1a>
 800015c:	4798      	blx	r3
 800015e:	bd08      	pop	{r3, pc}

08000160 <Notching>:

///
/// Funkcja obsluguj¹ca dzialania filtru blokujacego 50Hz
///
inline float Notching(float value)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b084      	sub	sp, #16
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	float w = 0;
 8000168:	4b3e      	ldr	r3, [pc, #248]	; (8000264 <Notching+0x104>)
 800016a:	60fb      	str	r3, [r7, #12]

	x_notch[2] = x_notch[1];
 800016c:	4b37      	ldr	r3, [pc, #220]	; (800024c <Notching+0xec>)
 800016e:	685a      	ldr	r2, [r3, #4]
 8000170:	4b36      	ldr	r3, [pc, #216]	; (800024c <Notching+0xec>)
 8000172:	609a      	str	r2, [r3, #8]
	x_notch[1] = x_notch[0];
 8000174:	4b35      	ldr	r3, [pc, #212]	; (800024c <Notching+0xec>)
 8000176:	681a      	ldr	r2, [r3, #0]
 8000178:	4b34      	ldr	r3, [pc, #208]	; (800024c <Notching+0xec>)
 800017a:	605a      	str	r2, [r3, #4]
	x_notch[0] = value;
 800017c:	4b33      	ldr	r3, [pc, #204]	; (800024c <Notching+0xec>)
 800017e:	687a      	ldr	r2, [r7, #4]
 8000180:	601a      	str	r2, [r3, #0]

	y_notch[2] = y_notch[1];
 8000182:	4b33      	ldr	r3, [pc, #204]	; (8000250 <Notching+0xf0>)
 8000184:	685a      	ldr	r2, [r3, #4]
 8000186:	4b32      	ldr	r3, [pc, #200]	; (8000250 <Notching+0xf0>)
 8000188:	609a      	str	r2, [r3, #8]
	y_notch[1] = y_notch[0];
 800018a:	4b31      	ldr	r3, [pc, #196]	; (8000250 <Notching+0xf0>)
 800018c:	681a      	ldr	r2, [r3, #0]
 800018e:	4b30      	ldr	r3, [pc, #192]	; (8000250 <Notching+0xf0>)
 8000190:	605a      	str	r2, [r3, #4]

	int i;
	for(i=0;i<NL2;i++) w+= (NUM2[i]*x_notch[i]);
 8000192:	f04f 0300 	mov.w	r3, #0
 8000196:	60bb      	str	r3, [r7, #8]
 8000198:	e01a      	b.n	80001d0 <Notching+0x70>
 800019a:	4b2e      	ldr	r3, [pc, #184]	; (8000254 <Notching+0xf4>)
 800019c:	68ba      	ldr	r2, [r7, #8]
 800019e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001a2:	4618      	mov	r0, r3
 80001a4:	f002 ffd0 	bl	8003148 <__aeabi_i2f>
 80001a8:	4602      	mov	r2, r0
 80001aa:	4b28      	ldr	r3, [pc, #160]	; (800024c <Notching+0xec>)
 80001ac:	68b9      	ldr	r1, [r7, #8]
 80001ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80001b2:	4610      	mov	r0, r2
 80001b4:	4619      	mov	r1, r3
 80001b6:	f003 f81b 	bl	80031f0 <__aeabi_fmul>
 80001ba:	4603      	mov	r3, r0
 80001bc:	68f8      	ldr	r0, [r7, #12]
 80001be:	4619      	mov	r1, r3
 80001c0:	f002 ff0e 	bl	8002fe0 <__addsf3>
 80001c4:	4603      	mov	r3, r0
 80001c6:	60fb      	str	r3, [r7, #12]
 80001c8:	68bb      	ldr	r3, [r7, #8]
 80001ca:	f103 0301 	add.w	r3, r3, #1
 80001ce:	60bb      	str	r3, [r7, #8]
 80001d0:	4b21      	ldr	r3, [pc, #132]	; (8000258 <Notching+0xf8>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	68ba      	ldr	r2, [r7, #8]
 80001d6:	429a      	cmp	r2, r3
 80001d8:	dbdf      	blt.n	800019a <Notching+0x3a>
	for(i=1;i<DL2;i++) w-= (DEN2[i]*y_notch[i]);
 80001da:	f04f 0301 	mov.w	r3, #1
 80001de:	60bb      	str	r3, [r7, #8]
 80001e0:	e01a      	b.n	8000218 <Notching+0xb8>
 80001e2:	4b1e      	ldr	r3, [pc, #120]	; (800025c <Notching+0xfc>)
 80001e4:	68ba      	ldr	r2, [r7, #8]
 80001e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001ea:	4618      	mov	r0, r3
 80001ec:	f002 ffac 	bl	8003148 <__aeabi_i2f>
 80001f0:	4602      	mov	r2, r0
 80001f2:	4b17      	ldr	r3, [pc, #92]	; (8000250 <Notching+0xf0>)
 80001f4:	68b9      	ldr	r1, [r7, #8]
 80001f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80001fa:	4610      	mov	r0, r2
 80001fc:	4619      	mov	r1, r3
 80001fe:	f002 fff7 	bl	80031f0 <__aeabi_fmul>
 8000202:	4603      	mov	r3, r0
 8000204:	68f8      	ldr	r0, [r7, #12]
 8000206:	4619      	mov	r1, r3
 8000208:	f002 fee8 	bl	8002fdc <__aeabi_fsub>
 800020c:	4603      	mov	r3, r0
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	f103 0301 	add.w	r3, r3, #1
 8000216:	60bb      	str	r3, [r7, #8]
 8000218:	4b11      	ldr	r3, [pc, #68]	; (8000260 <Notching+0x100>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	68ba      	ldr	r2, [r7, #8]
 800021e:	429a      	cmp	r2, r3
 8000220:	dbdf      	blt.n	80001e2 <Notching+0x82>
	w/= DEN2[0];
 8000222:	4b0e      	ldr	r3, [pc, #56]	; (800025c <Notching+0xfc>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4618      	mov	r0, r3
 8000228:	f002 ff8e 	bl	8003148 <__aeabi_i2f>
 800022c:	4603      	mov	r3, r0
 800022e:	68f8      	ldr	r0, [r7, #12]
 8000230:	4619      	mov	r1, r3
 8000232:	f003 f891 	bl	8003358 <__aeabi_fdiv>
 8000236:	4603      	mov	r3, r0
 8000238:	60fb      	str	r3, [r7, #12]

	y_notch[0] = w;
 800023a:	4b05      	ldr	r3, [pc, #20]	; (8000250 <Notching+0xf0>)
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	601a      	str	r2, [r3, #0]

	return w;
 8000240:	68fb      	ldr	r3, [r7, #12]
}
 8000242:	4618      	mov	r0, r3
 8000244:	f107 0710 	add.w	r7, r7, #16
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200001f0 	.word	0x200001f0
 8000250:	200001fc 	.word	0x200001fc
 8000254:	080035cc 	.word	0x080035cc
 8000258:	080035c8 	.word	0x080035c8
 800025c:	080035dc 	.word	0x080035dc
 8000260:	080035d8 	.word	0x080035d8
 8000264:	00000000 	.word	0x00000000

08000268 <HighPass>:

///
/// Funkcja obslugujaca dzialanie filtru gornoprzepustowego
///
inline float HighPass(float value)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b086      	sub	sp, #24
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	float w;

	int i,j;
	for(i=0;i<MWSPT_NSEC;i++)
 8000270:	f04f 0300 	mov.w	r3, #0
 8000274:	613b      	str	r3, [r7, #16]
 8000276:	e0ef      	b.n	8000458 <HighPass+0x1f0>
	{
		w = 0;
 8000278:	4b83      	ldr	r3, [pc, #524]	; (8000488 <HighPass+0x220>)
 800027a:	617b      	str	r3, [r7, #20]

		// i oznacza, który filtr w kaskadzie
		// drugi indeks to ile probek wstecz od obecnej chwili czasowej
		x_pass[i][2] = x_pass[i][1];
 800027c:	497c      	ldr	r1, [pc, #496]	; (8000470 <HighPass+0x208>)
 800027e:	693a      	ldr	r2, [r7, #16]
 8000280:	4613      	mov	r3, r2
 8000282:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000286:	189b      	adds	r3, r3, r2
 8000288:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800028c:	18cb      	adds	r3, r1, r3
 800028e:	f103 0304 	add.w	r3, r3, #4
 8000292:	6819      	ldr	r1, [r3, #0]
 8000294:	4876      	ldr	r0, [pc, #472]	; (8000470 <HighPass+0x208>)
 8000296:	693a      	ldr	r2, [r7, #16]
 8000298:	4613      	mov	r3, r2
 800029a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800029e:	189b      	adds	r3, r3, r2
 80002a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80002a4:	18c3      	adds	r3, r0, r3
 80002a6:	f103 0308 	add.w	r3, r3, #8
 80002aa:	6019      	str	r1, [r3, #0]
		x_pass[i][1] = x_pass[i][0];
 80002ac:	4970      	ldr	r1, [pc, #448]	; (8000470 <HighPass+0x208>)
 80002ae:	693a      	ldr	r2, [r7, #16]
 80002b0:	4613      	mov	r3, r2
 80002b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80002b6:	189b      	adds	r3, r3, r2
 80002b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80002bc:	18cb      	adds	r3, r1, r3
 80002be:	6819      	ldr	r1, [r3, #0]
 80002c0:	486b      	ldr	r0, [pc, #428]	; (8000470 <HighPass+0x208>)
 80002c2:	693a      	ldr	r2, [r7, #16]
 80002c4:	4613      	mov	r3, r2
 80002c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80002ca:	189b      	adds	r3, r3, r2
 80002cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80002d0:	18c3      	adds	r3, r0, r3
 80002d2:	f103 0304 	add.w	r3, r3, #4
 80002d6:	6019      	str	r1, [r3, #0]
		x_pass[i][0] = value;
 80002d8:	4965      	ldr	r1, [pc, #404]	; (8000470 <HighPass+0x208>)
 80002da:	693a      	ldr	r2, [r7, #16]
 80002dc:	4613      	mov	r3, r2
 80002de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80002e2:	189b      	adds	r3, r3, r2
 80002e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80002e8:	18cb      	adds	r3, r1, r3
 80002ea:	687a      	ldr	r2, [r7, #4]
 80002ec:	601a      	str	r2, [r3, #0]

		y_pass[i][2] = y_pass[i][1];
 80002ee:	4961      	ldr	r1, [pc, #388]	; (8000474 <HighPass+0x20c>)
 80002f0:	693a      	ldr	r2, [r7, #16]
 80002f2:	4613      	mov	r3, r2
 80002f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80002f8:	189b      	adds	r3, r3, r2
 80002fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80002fe:	18cb      	adds	r3, r1, r3
 8000300:	f103 0304 	add.w	r3, r3, #4
 8000304:	6819      	ldr	r1, [r3, #0]
 8000306:	485b      	ldr	r0, [pc, #364]	; (8000474 <HighPass+0x20c>)
 8000308:	693a      	ldr	r2, [r7, #16]
 800030a:	4613      	mov	r3, r2
 800030c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000310:	189b      	adds	r3, r3, r2
 8000312:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	f103 0308 	add.w	r3, r3, #8
 800031c:	6019      	str	r1, [r3, #0]
		y_pass[i][1] = y_pass[i][0];
 800031e:	4955      	ldr	r1, [pc, #340]	; (8000474 <HighPass+0x20c>)
 8000320:	693a      	ldr	r2, [r7, #16]
 8000322:	4613      	mov	r3, r2
 8000324:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000328:	189b      	adds	r3, r3, r2
 800032a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800032e:	18cb      	adds	r3, r1, r3
 8000330:	6819      	ldr	r1, [r3, #0]
 8000332:	4850      	ldr	r0, [pc, #320]	; (8000474 <HighPass+0x20c>)
 8000334:	693a      	ldr	r2, [r7, #16]
 8000336:	4613      	mov	r3, r2
 8000338:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800033c:	189b      	adds	r3, r3, r2
 800033e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000342:	18c3      	adds	r3, r0, r3
 8000344:	f103 0304 	add.w	r3, r3, #4
 8000348:	6019      	str	r1, [r3, #0]

		for(j=0;j<NL[i];j++)	w+= (NUM[i][j]*x_pass[i][j]);
 800034a:	f04f 0300 	mov.w	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	e026      	b.n	80003a0 <HighPass+0x138>
 8000352:	4949      	ldr	r1, [pc, #292]	; (8000478 <HighPass+0x210>)
 8000354:	693a      	ldr	r2, [r7, #16]
 8000356:	4613      	mov	r3, r2
 8000358:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800035c:	189b      	adds	r3, r3, r2
 800035e:	68fa      	ldr	r2, [r7, #12]
 8000360:	189b      	adds	r3, r3, r2
 8000362:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000366:	4618      	mov	r0, r3
 8000368:	f002 feee 	bl	8003148 <__aeabi_i2f>
 800036c:	4601      	mov	r1, r0
 800036e:	4840      	ldr	r0, [pc, #256]	; (8000470 <HighPass+0x208>)
 8000370:	693a      	ldr	r2, [r7, #16]
 8000372:	4613      	mov	r3, r2
 8000374:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000378:	189b      	adds	r3, r3, r2
 800037a:	68fa      	ldr	r2, [r7, #12]
 800037c:	189b      	adds	r3, r3, r2
 800037e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000382:	4608      	mov	r0, r1
 8000384:	4619      	mov	r1, r3
 8000386:	f002 ff33 	bl	80031f0 <__aeabi_fmul>
 800038a:	4603      	mov	r3, r0
 800038c:	6978      	ldr	r0, [r7, #20]
 800038e:	4619      	mov	r1, r3
 8000390:	f002 fe26 	bl	8002fe0 <__addsf3>
 8000394:	4603      	mov	r3, r0
 8000396:	617b      	str	r3, [r7, #20]
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	f103 0301 	add.w	r3, r3, #1
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	4b36      	ldr	r3, [pc, #216]	; (800047c <HighPass+0x214>)
 80003a2:	693a      	ldr	r2, [r7, #16]
 80003a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	dcd1      	bgt.n	8000352 <HighPass+0xea>
		for(j=1;j<DL[i];j++)	w-= (DEN[i][j]*y_pass[i][j]);
 80003ae:	f04f 0301 	mov.w	r3, #1
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	e026      	b.n	8000404 <HighPass+0x19c>
 80003b6:	4932      	ldr	r1, [pc, #200]	; (8000480 <HighPass+0x218>)
 80003b8:	693a      	ldr	r2, [r7, #16]
 80003ba:	4613      	mov	r3, r2
 80003bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80003c0:	189b      	adds	r3, r3, r2
 80003c2:	68fa      	ldr	r2, [r7, #12]
 80003c4:	189b      	adds	r3, r3, r2
 80003c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f002 febc 	bl	8003148 <__aeabi_i2f>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4828      	ldr	r0, [pc, #160]	; (8000474 <HighPass+0x20c>)
 80003d4:	693a      	ldr	r2, [r7, #16]
 80003d6:	4613      	mov	r3, r2
 80003d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80003dc:	189b      	adds	r3, r3, r2
 80003de:	68fa      	ldr	r2, [r7, #12]
 80003e0:	189b      	adds	r3, r3, r2
 80003e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80003e6:	4608      	mov	r0, r1
 80003e8:	4619      	mov	r1, r3
 80003ea:	f002 ff01 	bl	80031f0 <__aeabi_fmul>
 80003ee:	4603      	mov	r3, r0
 80003f0:	6978      	ldr	r0, [r7, #20]
 80003f2:	4619      	mov	r1, r3
 80003f4:	f002 fdf2 	bl	8002fdc <__aeabi_fsub>
 80003f8:	4603      	mov	r3, r0
 80003fa:	617b      	str	r3, [r7, #20]
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	f103 0301 	add.w	r3, r3, #1
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	4b1f      	ldr	r3, [pc, #124]	; (8000484 <HighPass+0x21c>)
 8000406:	693a      	ldr	r2, [r7, #16]
 8000408:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	429a      	cmp	r2, r3
 8000410:	dcd1      	bgt.n	80003b6 <HighPass+0x14e>
		w/=DEN[i][0];
 8000412:	491b      	ldr	r1, [pc, #108]	; (8000480 <HighPass+0x218>)
 8000414:	693a      	ldr	r2, [r7, #16]
 8000416:	4613      	mov	r3, r2
 8000418:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800041c:	189b      	adds	r3, r3, r2
 800041e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000422:	18cb      	adds	r3, r1, r3
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4618      	mov	r0, r3
 8000428:	f002 fe8e 	bl	8003148 <__aeabi_i2f>
 800042c:	4603      	mov	r3, r0
 800042e:	6978      	ldr	r0, [r7, #20]
 8000430:	4619      	mov	r1, r3
 8000432:	f002 ff91 	bl	8003358 <__aeabi_fdiv>
 8000436:	4603      	mov	r3, r0
 8000438:	617b      	str	r3, [r7, #20]

		y_pass[i][0] = w;
 800043a:	490e      	ldr	r1, [pc, #56]	; (8000474 <HighPass+0x20c>)
 800043c:	693a      	ldr	r2, [r7, #16]
 800043e:	4613      	mov	r3, r2
 8000440:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000444:	189b      	adds	r3, r3, r2
 8000446:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800044a:	18cb      	adds	r3, r1, r3
 800044c:	697a      	ldr	r2, [r7, #20]
 800044e:	601a      	str	r2, [r3, #0]
inline float HighPass(float value)
{
	float w;

	int i,j;
	for(i=0;i<MWSPT_NSEC;i++)
 8000450:	693b      	ldr	r3, [r7, #16]
 8000452:	f103 0301 	add.w	r3, r3, #1
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	693b      	ldr	r3, [r7, #16]
 800045a:	2b08      	cmp	r3, #8
 800045c:	f77f af0c 	ble.w	8000278 <HighPass+0x10>
		for(j=1;j<DL[i];j++)	w-= (DEN[i][j]*y_pass[i][j]);
		w/=DEN[i][0];

		y_pass[i][0] = w;
	}
	return y_pass[MWSPT_NSEC-1][0];
 8000460:	4b04      	ldr	r3, [pc, #16]	; (8000474 <HighPass+0x20c>)
 8000462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 8000464:	4618      	mov	r0, r3
 8000466:	f107 0718 	add.w	r7, r7, #24
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000184 	.word	0x20000184
 8000474:	20000118 	.word	0x20000118
 8000478:	0800360c 	.word	0x0800360c
 800047c:	080035e8 	.word	0x080035e8
 8000480:	0800369c 	.word	0x0800369c
 8000484:	08003678 	.word	0x08003678
 8000488:	00000000 	.word	0x00000000

0800048c <RCC_On>:

//#define FLASH_Latency_2                ((uint32_t)0x00000002)  /*!< FLASH Zero Latency cycle */
//#define FLASH_PrefetchBuffer_Enable    ((uint32_t)0x00000010)  /*!< FLASH Prefetch Buffer Enable */

void RCC_On()
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
	//{
	//	while(1)   asm("nop");                // W razie bledu petla nieskonczona
	//}


	RCC_DeInit();                                           // Reset ustawien RCC
 8000492:	f001 f965 	bl	8001760 <RCC_DeInit>
	RCC_HSEConfig(RCC_HSE_ON);                              // Wlacz HSE
 8000496:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800049a:	f001 f999 	bl	80017d0 <RCC_HSEConfig>
	HSEStartUpStatus = RCC_WaitForHSEStartUp();             // Czekaj az HSE bedzie gotowy
 800049e:	f001 f9c5 	bl	800182c <RCC_WaitForHSEStartUp>
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]
	if(HSEStartUpStatus == SUCCESS)
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d12f      	bne.n	800050c <RCC_On+0x80>
	{
		FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 80004ac:	f04f 0010 	mov.w	r0, #16
 80004b0:	f000 ffce 	bl	8001450 <FLASH_PrefetchBufferCmd>
		FLASH_SetLatency(FLASH_Latency_2);                  // zwloka dla pamieci Flash
 80004b4:	f04f 0002 	mov.w	r0, #2
 80004b8:	f000 ffac 	bl	8001414 <FLASH_SetLatency>
		RCC_HCLKConfig(RCC_SYSCLK_Div1);                    // HCLK = SYSCLK 1
 80004bc:	f04f 0000 	mov.w	r0, #0
 80004c0:	f001 fa44 	bl	800194c <RCC_HCLKConfig>
		RCC_PCLK2Config(RCC_HCLK_Div1);                     // PCLK2 = HCLK
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	f001 fa7c 	bl	80019c4 <RCC_PCLK2Config>
		RCC_PCLK1Config(RCC_HCLK_Div2);                     // PCLK1 = HCLK/2
 80004cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80004d0:	f001 fa5a 	bl	8001988 <RCC_PCLK1Config>
		RCC_PLLConfig(RCC_PLLSource_PREDIV1, RCC_PLLMul_7);// PLLCLK = 10MHz * 7 = 70 MHz
 80004d4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80004d8:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 80004dc:	f001 f9d8 	bl	8001890 <RCC_PLLConfig>
		RCC_PLLCmd(ENABLE);
 80004e0:	f04f 0001 	mov.w	r0, #1
 80004e4:	f001 f9f6 	bl	80018d4 <RCC_PLLCmd>
		while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET); // Czekaj az PLL poprawnie sie uruchomi
 80004e8:	bf00      	nop
 80004ea:	f04f 0039 	mov.w	r0, #57	; 0x39
 80004ee:	f001 fbe7 	bl	8001cc0 <RCC_GetFlagStatus>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0f8      	beq.n	80004ea <RCC_On+0x5e>
		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);          // PLL bedzie zrodlem sygnalu zegarowego
 80004f8:	f04f 0002 	mov.w	r0, #2
 80004fc:	f001 f9fa 	bl	80018f4 <RCC_SYSCLKConfig>
		while(RCC_GetSYSCLKSource() != 0x08);               // Czekaj az PLL bedzie sygnalem zegarowym systemu
 8000500:	bf00      	nop
 8000502:	f001 fa15 	bl	8001930 <RCC_GetSYSCLKSource>
 8000506:	4603      	mov	r3, r0
 8000508:	2b08      	cmp	r3, #8
 800050a:	d1fa      	bne.n	8000502 <RCC_On+0x76>
	}

	/* DMA clock enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1 | RCC_AHBPeriph_DMA2, ENABLE);
 800050c:	f04f 0003 	mov.w	r0, #3
 8000510:	f04f 0101 	mov.w	r1, #1
 8000514:	f001 fb90 	bl	8001c38 <RCC_AHBPeriphClockCmd>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE |RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO | RCC_APB2Periph_TIM1, ENABLE);
 8000518:	f640 0049 	movw	r0, #2121	; 0x849
 800051c:	f04f 0101 	mov.w	r1, #1
 8000520:	f001 fbac 	bl	8001c7c <RCC_APB2PeriphClockCmd>

	/* Enable UART clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000524:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000528:	f04f 0101 	mov.w	r1, #1
 800052c:	f001 fba6 	bl	8001c7c <RCC_APB2PeriphClockCmd>

	/* ADCCLK = PCLK2/4 */
	RCC_ADCCLKConfig(RCC_PCLK2_Div6);
 8000530:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000534:	f001 fa66 	bl	8001a04 <RCC_ADCCLKConfig>

	/* Enable ADC1, ADC2, ADC3 and GPIOC clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOC, ENABLE);
 8000538:	f44f 7004 	mov.w	r0, #528	; 0x210
 800053c:	f04f 0101 	mov.w	r1, #1
 8000540:	f001 fb9c 	bl	8001c7c <RCC_APB2PeriphClockCmd>
}
 8000544:	f107 0708 	add.w	r7, r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <GPIO_init>:

void GPIO_init()
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitDiody;
	GPIO_InitDiody.GPIO_Mode = GPIO_Mode_Out_PP;
 8000552:	f04f 0310 	mov.w	r3, #16
 8000556:	71fb      	strb	r3, [r7, #7]
	GPIO_InitDiody.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 |GPIO_Pin_6|GPIO_Pin_14|GPIO_Pin_15;
 8000558:	f24c 0370 	movw	r3, #49264	; 0xc070
 800055c:	80bb      	strh	r3, [r7, #4]
	GPIO_InitDiody.GPIO_Speed=GPIO_Speed_50MHz;
 800055e:	f04f 0303 	mov.w	r3, #3
 8000562:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOE, &GPIO_InitDiody);
 8000564:	f107 0304 	add.w	r3, r7, #4
 8000568:	480e      	ldr	r0, [pc, #56]	; (80005a4 <GPIO_init+0x58>)
 800056a:	4619      	mov	r1, r3
 800056c:	f000 ff88 	bl	8001480 <GPIO_Init>
	GPIO_ResetBits(GPIOE, GPIO_Pin_14);
 8000570:	480c      	ldr	r0, [pc, #48]	; (80005a4 <GPIO_init+0x58>)
 8000572:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000576:	f001 f863 	bl	8001640 <GPIO_ResetBits>
	GPIO_ResetBits(GPIOE, GPIO_Pin_15);
 800057a:	480a      	ldr	r0, [pc, #40]	; (80005a4 <GPIO_init+0x58>)
 800057c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000580:	f001 f85e 	bl	8001640 <GPIO_ResetBits>


	GPIO_InitTypeDef GPIO_InitStructure;

    /* Configure PC.04 (ADC Channel14) as analog inputs */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8000584:	f04f 0310 	mov.w	r3, #16
 8000588:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 800058a:	f04f 0300 	mov.w	r3, #0
 800058e:	70fb      	strb	r3, [r7, #3]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000590:	463b      	mov	r3, r7
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <GPIO_init+0x5c>)
 8000594:	4619      	mov	r1, r3
 8000596:	f000 ff73 	bl	8001480 <GPIO_Init>
}
 800059a:	f107 0708 	add.w	r7, r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40011800 	.word	0x40011800
 80005a8:	40011000 	.word	0x40011000

080005ac <USART_init>:

void USART_init()
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
	USART_InitTypeDef USART_InitStructure;
	USART_InitStructure.USART_BaudRate = 9600;
 80005b2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80005b6:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80005b8:	f04f 0300 	mov.w	r3, #0
 80005bc:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80005be:	f04f 0300 	mov.w	r3, #0
 80005c2:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 80005c4:	f04f 0300 	mov.w	r3, #0
 80005c8:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80005ca:	f04f 0300 	mov.w	r3, #0
 80005ce:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80005d0:	f04f 030c 	mov.w	r3, #12
 80005d4:	827b      	strh	r3, [r7, #18]

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_PinRemapConfig(GPIO_Remap_USART1, ENABLE);
 80005d6:	f04f 0004 	mov.w	r0, #4
 80005da:	f04f 0101 	mov.w	r1, #1
 80005de:	f001 f83d 	bl	800165c <GPIO_PinRemapConfig>
	/* Configure USART Tx as alternate function push-pull */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80005e2:	f04f 0318 	mov.w	r3, #24
 80005e6:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 80005e8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80005ec:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005ee:	f04f 0303 	mov.w	r3, #3
 80005f2:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80005f4:	f107 0304 	add.w	r3, r7, #4
 80005f8:	480c      	ldr	r0, [pc, #48]	; (800062c <USART_init+0x80>)
 80005fa:	4619      	mov	r1, r3
 80005fc:	f000 ff40 	bl	8001480 <GPIO_Init>

	/* Configure USART Rx as input floating */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000600:	f04f 0304 	mov.w	r3, #4
 8000604:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 8000606:	f04f 0380 	mov.w	r3, #128	; 0x80
 800060a:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800060c:	f107 0304 	add.w	r3, r7, #4
 8000610:	4806      	ldr	r0, [pc, #24]	; (800062c <USART_init+0x80>)
 8000612:	4619      	mov	r1, r3
 8000614:	f000 ff34 	bl	8001480 <GPIO_Init>

	/* USART configuration */
	USART_Init(USART1, &USART_InitStructure);
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <USART_init+0x84>)
 800061e:	4619      	mov	r1, r3
 8000620:	f001 fd32 	bl	8002088 <USART_Init>
}
 8000624:	f107 0718 	add.w	r7, r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40010c00 	.word	0x40010c00
 8000630:	40013800 	.word	0x40013800

08000634 <Timer_init>:

void Timer_init()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIMER1;
	TIMER1.TIM_ClockDivision = 0;
 800063a:	f04f 0300 	mov.w	r3, #0
 800063e:	837b      	strh	r3, [r7, #26]
	TIMER1.TIM_CounterMode = TIM_CounterMode_Up;
 8000640:	f04f 0300 	mov.w	r3, #0
 8000644:	82fb      	strh	r3, [r7, #22]
	TIMER1.TIM_Prescaler = 70; // 100 000 Hz
 8000646:	f04f 0346 	mov.w	r3, #70	; 0x46
 800064a:	82bb      	strh	r3, [r7, #20]
	TIMER1.TIM_Period = 200; // 5 000 Hz
 800064c:	f04f 03c8 	mov.w	r3, #200	; 0xc8
 8000650:	833b      	strh	r3, [r7, #24]
	//TIMER1.TIM_Prescaler = 7000; // 1000 Hz
	//TIMER1.TIM_Period = 50000; // 1/5 Hz
	TIM_TimeBaseInit(TIM1, &TIMER1);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	480d      	ldr	r0, [pc, #52]	; (800068c <Timer_init+0x58>)
 8000658:	4619      	mov	r1, r3
 800065a:	f001 fb73 	bl	8001d44 <TIM_TimeBaseInit>


	TIM_OCInitTypeDef         TIM_OCInitStructure;
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800065e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8000662:	80bb      	strh	r3, [r7, #4]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8000664:	f04f 0301 	mov.w	r3, #1
 8000668:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0x7F;
 800066a:	f04f 037f 	mov.w	r3, #127	; 0x7f
 800066e:	817b      	strh	r3, [r7, #10]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8000670:	f04f 0302 	mov.w	r3, #2
 8000674:	81bb      	strh	r3, [r7, #12]
	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 8000676:	f107 0304 	add.w	r3, r7, #4
 800067a:	4804      	ldr	r0, [pc, #16]	; (800068c <Timer_init+0x58>)
 800067c:	4619      	mov	r1, r3
 800067e:	f001 fbe1 	bl	8001e44 <TIM_OC1Init>
}
 8000682:	f107 0720 	add.w	r7, r7, #32
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40012c00 	.word	0x40012c00

08000690 <DMA_init>:
void DMA_init()
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b096      	sub	sp, #88	; 0x58
 8000694:	af00      	add	r7, sp, #0
	DMA_InitTypeDef DMA_InitStructure, DMA_InitStructure2;

     /* USARTy_Tx_DMA_Channel (triggered by USARTy Tx event) Config */
	DMA_DeInit(DMA1_Channel4);
 8000696:	4832      	ldr	r0, [pc, #200]	; (8000760 <DMA_init+0xd0>)
 8000698:	f000 fd1c 	bl	80010d4 <DMA_DeInit>
	DMA_InitStructure.DMA_PeripheralBaseAddr = ((uint32_t)0x40013804);
 800069c:	4b31      	ldr	r3, [pc, #196]	; (8000764 <DMA_init+0xd4>)
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)TxBuffer;
 80006a0:	4b31      	ldr	r3, [pc, #196]	; (8000768 <DMA_init+0xd8>)
 80006a2:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 80006a4:	f04f 0310 	mov.w	r3, #16
 80006a8:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_InitStructure.DMA_BufferSize = TxBufferSize;
 80006aa:	4b30      	ldr	r3, [pc, #192]	; (800076c <DMA_init+0xdc>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80006b0:	f04f 0300 	mov.w	r3, #0
 80006b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80006b6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80006bc:	f04f 0300 	mov.w	r3, #0
 80006c0:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80006c2:	f04f 0300 	mov.w	r3, #0
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 80006c8:	f04f 0300 	mov.w	r3, #0
 80006cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80006ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d2:	653b      	str	r3, [r7, #80]	; 0x50
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	657b      	str	r3, [r7, #84]	; 0x54
	DMA_Init(DMA1_Channel4, &DMA_InitStructure);
 80006da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006de:	4820      	ldr	r0, [pc, #128]	; (8000760 <DMA_init+0xd0>)
 80006e0:	4619      	mov	r1, r3
 80006e2:	f000 fdb7 	bl	8001254 <DMA_Init>

	DMA_ITConfig(DMA1_Channel4,DMA_IT_TC ,ENABLE);
 80006e6:	481e      	ldr	r0, [pc, #120]	; (8000760 <DMA_init+0xd0>)
 80006e8:	f04f 0102 	mov.w	r1, #2
 80006ec:	f04f 0201 	mov.w	r2, #1
 80006f0:	f000 fe10 	bl	8001314 <DMA_ITConfig>
	DMA_ClearFlag(DMA1_FLAG_TC4);
 80006f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006f8:	f000 fe2a 	bl	8001350 <DMA_ClearFlag>

  /* DMA1 channel1 configuration ----------------------------------------------*/
    DMA_DeInit(DMA1_Channel1);
 80006fc:	481c      	ldr	r0, [pc, #112]	; (8000770 <DMA_init+0xe0>)
 80006fe:	f000 fce9 	bl	80010d4 <DMA_DeInit>
    DMA_InitStructure2.DMA_PeripheralBaseAddr = ((uint32_t)0x4001244C);
 8000702:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <DMA_init+0xe4>)
 8000704:	603b      	str	r3, [r7, #0]
    DMA_InitStructure2.DMA_MemoryBaseAddr = (uint32_t)&ADC1ConvertedValue;
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <DMA_init+0xe8>)
 8000708:	607b      	str	r3, [r7, #4]
    DMA_InitStructure2.DMA_DIR = DMA_DIR_PeripheralSRC;
 800070a:	f04f 0300 	mov.w	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
    DMA_InitStructure2.DMA_BufferSize = 1;
 8000710:	f04f 0301 	mov.w	r3, #1
 8000714:	60fb      	str	r3, [r7, #12]
    DMA_InitStructure2.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000716:	f04f 0300 	mov.w	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
    DMA_InitStructure2.DMA_MemoryInc = DMA_MemoryInc_Disable;
 800071c:	f04f 0300 	mov.w	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
    DMA_InitStructure2.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8000722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000726:	61bb      	str	r3, [r7, #24]
    DMA_InitStructure2.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8000728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072c:	61fb      	str	r3, [r7, #28]
    DMA_InitStructure2.DMA_Mode = DMA_Mode_Circular;
 800072e:	f04f 0320 	mov.w	r3, #32
 8000732:	623b      	str	r3, [r7, #32]
    DMA_InitStructure2.DMA_Priority = DMA_Priority_High;
 8000734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
    DMA_InitStructure2.DMA_M2M = DMA_M2M_Disable;
 800073a:	f04f 0300 	mov.w	r3, #0
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA_Init(DMA1_Channel1, &DMA_InitStructure2);
 8000740:	463b      	mov	r3, r7
 8000742:	480b      	ldr	r0, [pc, #44]	; (8000770 <DMA_init+0xe0>)
 8000744:	4619      	mov	r1, r3
 8000746:	f000 fd85 	bl	8001254 <DMA_Init>

    DMA_ITConfig(DMA1_Channel1,DMA1_IT_TC1 ,ENABLE);
 800074a:	4809      	ldr	r0, [pc, #36]	; (8000770 <DMA_init+0xe0>)
 800074c:	f04f 0102 	mov.w	r1, #2
 8000750:	f04f 0201 	mov.w	r2, #1
 8000754:	f000 fdde 	bl	8001314 <DMA_ITConfig>
}
 8000758:	f107 0758 	add.w	r7, r7, #88	; 0x58
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40020044 	.word	0x40020044
 8000764:	40013804 	.word	0x40013804
 8000768:	20000214 	.word	0x20000214
 800076c:	20000000 	.word	0x20000000
 8000770:	40020008 	.word	0x40020008
 8000774:	4001244c 	.word	0x4001244c
 8000778:	20000112 	.word	0x20000112

0800077c <ADC_init>:
void ADC_init()
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
	ADC_InitTypeDef ADC_InitStructure;

	/* ADC1 configuration ------------------------------------------------------*/
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 8000782:	f04f 0300 	mov.w	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8000788:	f04f 0300 	mov.w	r3, #0
 800078c:	723b      	strb	r3, [r7, #8]
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 800078e:	f04f 0300 	mov.w	r3, #0
 8000792:	727b      	strb	r3, [r7, #9]
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 800079a:	f04f 0300 	mov.w	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_NbrOfChannel = 1;
 80007a0:	f04f 0301 	mov.w	r3, #1
 80007a4:	753b      	strb	r3, [r7, #20]
	ADC_Init(ADC1, &ADC_InitStructure);
 80007a6:	f107 0304 	add.w	r3, r7, #4
 80007aa:	4808      	ldr	r0, [pc, #32]	; (80007cc <ADC_init+0x50>)
 80007ac:	4619      	mov	r1, r3
 80007ae:	f000 fa9f 	bl	8000cf0 <ADC_Init>
	/* ADC1 regular channels configuration */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_14, 1, ADC_SampleTime_28Cycles5);
 80007b2:	4806      	ldr	r0, [pc, #24]	; (80007cc <ADC_init+0x50>)
 80007b4:	f04f 010e 	mov.w	r1, #14
 80007b8:	f04f 0201 	mov.w	r2, #1
 80007bc:	f04f 0303 	mov.w	r3, #3
 80007c0:	f000 fb84 	bl	8000ecc <ADC_RegularChannelConfig>

	/* Enable ADC2 EOC interrupt */
	//ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
	//ADC_ITConfig(ADC1, ADC_IT_JEOC, ENABLE);

}
 80007c4:	f107 0718 	add.w	r7, r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40012400 	.word	0x40012400

080007d0 <USART1_IRQHandler>:
#include "Init.h"
#include "ObslugaPrzerwan.h"
#include "Filtry.h"

void USART1_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <USART1_IRQHandler+0x1c>)
 80007d6:	f240 5125 	movw	r1, #1317	; 0x525
 80007da:	f001 fd73 	bl	80022c4 <USART_GetITStatus>
  {
     // USART_ITConfig(EVAL_COM1, USART_IT_RXNE, DISABLE);
  }

  if(USART_GetITStatus(USART1, USART_IT_TXE) != RESET)
 80007de:	4803      	ldr	r0, [pc, #12]	; (80007ec <USART1_IRQHandler+0x1c>)
 80007e0:	f240 7127 	movw	r1, #1831	; 0x727
 80007e4:	f001 fd6e 	bl	80022c4 <USART_GetITStatus>
  {
    //  USART_ITConfig(EVAL_COM1, USART_IT_TXE, DISABLE);
  }
}
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40013800 	.word	0x40013800

080007f0 <TIM1_CC_IRQHandler>:

void TIM1_CC_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	if(TIM_GetITStatus(TIM1, TIM_IT_CC1)!=RESET)
 80007f4:	4806      	ldr	r0, [pc, #24]	; (8000810 <TIM1_CC_IRQHandler+0x20>)
 80007f6:	f04f 0102 	mov.w	r1, #2
 80007fa:	f001 fc01 	bl	8002000 <TIM_GetITStatus>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d004      	beq.n	800080e <TIM1_CC_IRQHandler+0x1e>
	{
	//USART_SendData(USART1,'s');
	 TIM_ClearITPendingBit(TIM1, TIM_IT_CC1);
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <TIM1_CC_IRQHandler+0x20>)
 8000806:	f04f 0102 	mov.w	r1, #2
 800080a:	f001 fc2b 	bl	8002064 <TIM_ClearITPendingBit>
	}
 }
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40012c00 	.word	0x40012c00
 8000814:	00000000 	.word	0x00000000

08000818 <DMA1_Channel1_IRQHandler>:
{
   ADC1ConvertedValue = ADC_GetConversionValue(ADC1);
}*/

void DMA1_Channel1_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  if(DMA_GetITStatus(DMA1_IT_TC1))
 800081e:	f04f 0002 	mov.w	r0, #2
 8000822:	f000 fdaf 	bl	8001384 <DMA_GetITStatus>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d03b      	beq.n	80008a4 <DMA1_Channel1_IRQHandler+0x8c>
  {
	  val = ADC1ConvertedValue * 3.3 / 4096;
 800082c:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <DMA1_Channel1_IRQHandler+0xa0>)
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f002 f87f 	bl	8002934 <__aeabi_i2d>
 8000836:	4602      	mov	r2, r0
 8000838:	460b      	mov	r3, r1
 800083a:	4610      	mov	r0, r2
 800083c:	4619      	mov	r1, r3
 800083e:	a31c      	add	r3, pc, #112	; (adr r3, 80008b0 <DMA1_Channel1_IRQHandler+0x98>)
 8000840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000844:	f002 f8dc 	bl	8002a00 <__aeabi_dmul>
 8000848:	4602      	mov	r2, r0
 800084a:	460b      	mov	r3, r1
 800084c:	4610      	mov	r0, r2
 800084e:	4619      	mov	r1, r3
 8000850:	f04f 0200 	mov.w	r2, #0
 8000854:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000858:	f503 0330 	add.w	r3, r3, #11534336	; 0xb00000
 800085c:	f002 f9fa 	bl	8002c54 <__aeabi_ddiv>
 8000860:	4602      	mov	r2, r0
 8000862:	460b      	mov	r3, r1
 8000864:	4610      	mov	r0, r2
 8000866:	4619      	mov	r1, r3
 8000868:	f002 fb64 	bl	8002f34 <__aeabi_d2f>
 800086c:	4602      	mov	r2, r0
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <DMA1_Channel1_IRQHandler+0xa4>)
 8000870:	601a      	str	r2, [r3, #0]

	  if(flaga == 1)
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <DMA1_Channel1_IRQHandler+0xa8>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d10c      	bne.n	8000894 <DMA1_Channel1_IRQHandler+0x7c>
	  {
		  int i;
	  	  for(i=0;i<100000;i++) asm("nop");
 800087a:	f04f 0300 	mov.w	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	e004      	b.n	800088c <DMA1_Channel1_IRQHandler+0x74>
 8000882:	bf00      	nop
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f103 0301 	add.w	r3, r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <DMA1_Channel1_IRQHandler+0xac>)
 8000890:	429a      	cmp	r2, r3
 8000892:	ddf6      	ble.n	8000882 <DMA1_Channel1_IRQHandler+0x6a>
	  }
	  flaga = 1;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <DMA1_Channel1_IRQHandler+0xa8>)
 8000896:	f04f 0201 	mov.w	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
	  DMA_ClearITPendingBit(DMA1_IT_TC1);
 800089c:	f04f 0002 	mov.w	r0, #2
 80008a0:	f000 fd9e 	bl	80013e0 <DMA_ClearITPendingBit>
  }
}
 80008a4:	f107 0708 	add.w	r7, r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	f3af 8000 	nop.w
 80008b0:	66666666 	.word	0x66666666
 80008b4:	400a6666 	.word	0x400a6666
 80008b8:	20000112 	.word	0x20000112
 80008bc:	20000210 	.word	0x20000210
 80008c0:	20000114 	.word	0x20000114
 80008c4:	0001869f 	.word	0x0001869f

080008c8 <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	; 0x30
 80008cc:	af00      	add	r7, sp, #0
  if(DMA_GetITStatus(DMA1_IT_TC4))
 80008ce:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008d2:	f000 fd57 	bl	8001384 <DMA_GetITStatus>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d02b      	beq.n	8000934 <DMA1_Channel4_IRQHandler+0x6c>
  {
	  DMA_ClearITPendingBit(DMA1_IT_TC4);
 80008dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008e0:	f000 fd7e 	bl	80013e0 <DMA_ClearITPendingBit>

	  DMA_InitTypeDef DMA_InitStructure;

	  /* USARTy_Tx_DMA_Channel (triggered by USARTy Tx event) Config */
	  DMA_DeInit(DMA1_Channel4);
 80008e4:	4815      	ldr	r0, [pc, #84]	; (800093c <DMA1_Channel4_IRQHandler+0x74>)
 80008e6:	f000 fbf5 	bl	80010d4 <DMA_DeInit>
	  DMA_InitStructure.DMA_PeripheralBaseAddr = ((uint32_t)0x40013804);
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <DMA1_Channel4_IRQHandler+0x78>)
 80008ec:	607b      	str	r3, [r7, #4]
	  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)TxBuffer;
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <DMA1_Channel4_IRQHandler+0x7c>)
 80008f0:	60bb      	str	r3, [r7, #8]
	  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 80008f2:	f04f 0310 	mov.w	r3, #16
 80008f6:	60fb      	str	r3, [r7, #12]
	  DMA_InitStructure.DMA_BufferSize = TxBufferSize;
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <DMA1_Channel4_IRQHandler+0x80>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	613b      	str	r3, [r7, #16]
	  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80008fe:	f04f 0300 	mov.w	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
	  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000904:	f04f 0380 	mov.w	r3, #128	; 0x80
 8000908:	61bb      	str	r3, [r7, #24]
	  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800090a:	f04f 0300 	mov.w	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
	  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8000910:	f04f 0300 	mov.w	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
	  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8000916:	f04f 0300 	mov.w	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
	  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800091c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
	  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8000922:	f04f 0300 	mov.w	r3, #0
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DMA_Init(DMA1_Channel4, &DMA_InitStructure);
 8000928:	f107 0304 	add.w	r3, r7, #4
 800092c:	4803      	ldr	r0, [pc, #12]	; (800093c <DMA1_Channel4_IRQHandler+0x74>)
 800092e:	4619      	mov	r1, r3
 8000930:	f000 fc90 	bl	8001254 <DMA_Init>
  }
}
 8000934:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40020044 	.word	0x40020044
 8000940:	40013804 	.word	0x40013804
 8000944:	20000214 	.word	0x20000214
 8000948:	20000000 	.word	0x20000000

0800094c <NVIC_Configuration>:

//
// Funkcja ustawiajaca dwa przerwanie: konca transmisji usarta po dma oraz konca konwersji ADC
//
void NVIC_Configuration(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
	/* Enable the DMA1 Channel1 Interrupt */
	NVIC_InitTypeDef NVIC_InitStructure2;
	NVIC_InitStructure2.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 8000952:	f04f 030b 	mov.w	r3, #11
 8000956:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure2.NVIC_IRQChannelPreemptionPriority = 0;
 8000958:	f04f 0300 	mov.w	r3, #0
 800095c:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure2.NVIC_IRQChannelSubPriority = 0;
 800095e:	f04f 0300 	mov.w	r3, #0
 8000962:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure2.NVIC_IRQChannelCmd = ENABLE;
 8000964:	f04f 0301 	mov.w	r3, #1
 8000968:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure2);
 800096a:	f107 0304 	add.w	r3, r7, #4
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f952 	bl	8000c18 <NVIC_Init>

	/* Enable the DMA1 Channel4 Interrupt */
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel4_IRQn;
 8000974:	f04f 030e 	mov.w	r3, #14
 8000978:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800097a:	f04f 0300 	mov.w	r3, #0
 800097e:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000980:	f04f 0300 	mov.w	r3, #0
 8000984:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000986:	f04f 0301 	mov.w	r3, #1
 800098a:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure);
 800098c:	463b      	mov	r3, r7
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f942 	bl	8000c18 <NVIC_Init>
}
 8000994:	f107 0708 	add.w	r7, r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <main>:
uint16_t ADC1ConvertedValue = 0;
float RMS, LicznikProbek, val;
uint8_t flaga = 0;

int main()
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
	RCC_On();
 80009a2:	f7ff fd73 	bl	800048c <RCC_On>
	NVIC_Configuration();
 80009a6:	f7ff ffd1 	bl	800094c <NVIC_Configuration>
	GPIO_init();
 80009aa:	f7ff fdcf 	bl	800054c <GPIO_init>

	ADC_init();
 80009ae:	f7ff fee5 	bl	800077c <ADC_init>
	USART_init();
 80009b2:	f7ff fdfb 	bl	80005ac <USART_init>
	DMA_init();
 80009b6:	f7ff fe6b 	bl	8000690 <DMA_init>

	Timer_init();
 80009ba:	f7ff fe3b 	bl	8000634 <Timer_init>


	RMS = 0;
 80009be:	4b70      	ldr	r3, [pc, #448]	; (8000b80 <main+0x1e4>)
 80009c0:	4a79      	ldr	r2, [pc, #484]	; (8000ba8 <main+0x20c>)
 80009c2:	601a      	str	r2, [r3, #0]
	LicznikProbek = 0;
 80009c4:	4b6f      	ldr	r3, [pc, #444]	; (8000b84 <main+0x1e8>)
 80009c6:	4a78      	ldr	r2, [pc, #480]	; (8000ba8 <main+0x20c>)
 80009c8:	601a      	str	r2, [r3, #0]

	int i;
	for(i=0;i<10;i++)	TxBuffer[i] = 'A'+i;
 80009ca:	f04f 0300 	mov.w	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	e00c      	b.n	80009ec <main+0x50>
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	f103 0341 	add.w	r3, r3, #65	; 0x41
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	496a      	ldr	r1, [pc, #424]	; (8000b88 <main+0x1ec>)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	18cb      	adds	r3, r1, r3
 80009e2:	701a      	strb	r2, [r3, #0]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f103 0301 	add.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	2b09      	cmp	r3, #9
 80009f0:	ddef      	ble.n	80009d2 <main+0x36>




	/* Enable USART */
		USART_Cmd(USART1, ENABLE);
 80009f2:	4866      	ldr	r0, [pc, #408]	; (8000b8c <main+0x1f0>)
 80009f4:	f04f 0101 	mov.w	r1, #1
 80009f8:	f001 fc1e 	bl	8002238 <USART_Cmd>

	/* Enable USART1 DMA TX request */
	USART_DMACmd(USART1, USART_DMAReq_Tx, ENABLE);
 80009fc:	4863      	ldr	r0, [pc, #396]	; (8000b8c <main+0x1f0>)
 80009fe:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000a02:	f04f 0201 	mov.w	r2, #1
 8000a06:	f001 fc37 	bl	8002278 <USART_DMACmd>

	/// ADC !!!!


    // Enable DMA1 channel1
    DMA_Cmd(DMA1_Channel1, ENABLE);
 8000a0a:	4861      	ldr	r0, [pc, #388]	; (8000b90 <main+0x1f4>)
 8000a0c:	f04f 0101 	mov.w	r1, #1
 8000a10:	f000 fc62 	bl	80012d8 <DMA_Cmd>
	/* Enable ADC1 DMA */
	ADC_DMACmd(ADC1, ENABLE);
 8000a14:	485f      	ldr	r0, [pc, #380]	; (8000b94 <main+0x1f8>)
 8000a16:	f04f 0101 	mov.w	r1, #1
 8000a1a:	f000 f9e3 	bl	8000de4 <ADC_DMACmd>


	ADC_ExternalTrigConvCmd(ADC1, ENABLE);
 8000a1e:	485d      	ldr	r0, [pc, #372]	; (8000b94 <main+0x1f8>)
 8000a20:	f04f 0101 	mov.w	r1, #1
 8000a24:	f000 fb3a 	bl	800109c <ADC_ExternalTrigConvCmd>

	/* Enable ADC1 */
	ADC_Cmd(ADC1, ENABLE);
 8000a28:	485a      	ldr	r0, [pc, #360]	; (8000b94 <main+0x1f8>)
 8000a2a:	f04f 0101 	mov.w	r1, #1
 8000a2e:	f000 f9bd 	bl	8000dac <ADC_Cmd>

	/* Enable ADC1 reset calibration register */
	ADC_ResetCalibration(ADC1);
 8000a32:	4858      	ldr	r0, [pc, #352]	; (8000b94 <main+0x1f8>)
 8000a34:	f000 f9f2 	bl	8000e1c <ADC_ResetCalibration>
	/* Check the end of ADC1 reset calibration register */
	while(ADC_GetResetCalibrationStatus(ADC1));
 8000a38:	bf00      	nop
 8000a3a:	4856      	ldr	r0, [pc, #344]	; (8000b94 <main+0x1f8>)
 8000a3c:	f000 f9fe 	bl	8000e3c <ADC_GetResetCalibrationStatus>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1f9      	bne.n	8000a3a <main+0x9e>

	/* Start ADC1 calibration */
	ADC_StartCalibration(ADC1);
 8000a46:	4853      	ldr	r0, [pc, #332]	; (8000b94 <main+0x1f8>)
 8000a48:	f000 fa14 	bl	8000e74 <ADC_StartCalibration>
	/* Check the end of ADC1 calibration */
	while(ADC_GetCalibrationStatus(ADC1));
 8000a4c:	bf00      	nop
 8000a4e:	4851      	ldr	r0, [pc, #324]	; (8000b94 <main+0x1f8>)
 8000a50:	f000 fa20 	bl	8000e94 <ADC_GetCalibrationStatus>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1f9      	bne.n	8000a4e <main+0xb2>

	TIM_Cmd(TIM1, ENABLE);
 8000a5a:	484f      	ldr	r0, [pc, #316]	; (8000b98 <main+0x1fc>)
 8000a5c:	f04f 0101 	mov.w	r1, #1
 8000a60:	f001 fa86 	bl	8001f70 <TIM_Cmd>

	/* TIM1 main Output Enable */
	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8000a64:	484c      	ldr	r0, [pc, #304]	; (8000b98 <main+0x1fc>)
 8000a66:	f04f 0101 	mov.w	r1, #1
 8000a6a:	f001 faa1 	bl	8001fb0 <TIM_CtrlPWMOutputs>
 8000a6e:	e000      	b.n	8000a72 <main+0xd6>
				LicznikProbek = 0;
				RMS = 0;
			}
			flaga = 0;
		}
	}
 8000a70:	bf00      	nop
		//x = DMA_GetITStatus(DMA1_IT_TC4);

		//y = ADC_GetITStatus(ADC1,ADC_IT_JEOC);
		//z = TIM_GetCounter(TIM1);
		//for(i=0;i<100000;i++) asm("nop");
		if(flaga)
 8000a72:	4b4a      	ldr	r3, [pc, #296]	; (8000b9c <main+0x200>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0fa      	beq.n	8000a70 <main+0xd4>
		{
			val = Notching(val);
 8000a7a:	4b49      	ldr	r3, [pc, #292]	; (8000ba0 <main+0x204>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fb6e 	bl	8000160 <Notching>
 8000a84:	4602      	mov	r2, r0
 8000a86:	4b46      	ldr	r3, [pc, #280]	; (8000ba0 <main+0x204>)
 8000a88:	601a      	str	r2, [r3, #0]
			val = HighPass(val);
 8000a8a:	4b45      	ldr	r3, [pc, #276]	; (8000ba0 <main+0x204>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fbea 	bl	8000268 <HighPass>
 8000a94:	4602      	mov	r2, r0
 8000a96:	4b42      	ldr	r3, [pc, #264]	; (8000ba0 <main+0x204>)
 8000a98:	601a      	str	r2, [r3, #0]

			// Liczenie RMS
			RMS = RMS + val*val;
 8000a9a:	4b41      	ldr	r3, [pc, #260]	; (8000ba0 <main+0x204>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	4b40      	ldr	r3, [pc, #256]	; (8000ba0 <main+0x204>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f002 fba3 	bl	80031f0 <__aeabi_fmul>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b34      	ldr	r3, [pc, #208]	; (8000b80 <main+0x1e4>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f002 fa93 	bl	8002fe0 <__addsf3>
 8000aba:	4603      	mov	r3, r0
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b30      	ldr	r3, [pc, #192]	; (8000b80 <main+0x1e4>)
 8000ac0:	601a      	str	r2, [r3, #0]
			LicznikProbek = LicznikProbek + 1;
 8000ac2:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <main+0x1e8>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	4938      	ldr	r1, [pc, #224]	; (8000bac <main+0x210>)
 8000aca:	f002 fa89 	bl	8002fe0 <__addsf3>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <main+0x1e8>)
 8000ad4:	601a      	str	r2, [r3, #0]

			if(LicznikProbek == 5000)
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <main+0x1e8>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4618      	mov	r0, r3
 8000adc:	4934      	ldr	r1, [pc, #208]	; (8000bb0 <main+0x214>)
 8000ade:	f002 fd1b 	bl	8003518 <__aeabi_fcmpeq>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d045      	beq.n	8000b74 <main+0x1d8>
			{
				RMS = RMS / 5000;
 8000ae8:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <main+0x1e4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	4930      	ldr	r1, [pc, #192]	; (8000bb0 <main+0x214>)
 8000af0:	f002 fc32 	bl	8003358 <__aeabi_fdiv>
 8000af4:	4603      	mov	r3, r0
 8000af6:	461a      	mov	r2, r3
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <main+0x1e4>)
 8000afa:	601a      	str	r2, [r3, #0]
				RMS = sqrt(RMS);
 8000afc:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <main+0x1e4>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f001 ff29 	bl	8002958 <__aeabi_f2d>
 8000b06:	4602      	mov	r2, r0
 8000b08:	460b      	mov	r3, r1
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f001 fc3f 	bl	8002390 <sqrt>
 8000b12:	4602      	mov	r2, r0
 8000b14:	460b      	mov	r3, r1
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f002 fa0b 	bl	8002f34 <__aeabi_d2f>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <main+0x1e4>)
 8000b22:	601a      	str	r2, [r3, #0]

				// Przepisanie wartoci do tymczasowej i wys³anie
				uint32_t tymczasowa,i;
				tymczasowa = (uint32_t) RMS;
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <main+0x1e4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f002 fd27 	bl	800357c <__aeabi_f2uiz>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	607b      	str	r3, [r7, #4]
				//tymczasowa = 0x0F0E0D0C;

				for(i=0;i<4;i++)
 8000b32:	f04f 0300 	mov.w	r3, #0
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	e00e      	b.n	8000b58 <main+0x1bc>
				{
					TxBuffer[i] = (tymczasowa>>(8*i)) & 0x000000FF;
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	fa22 f303 	lsr.w	r3, r2, r3
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	490f      	ldr	r1, [pc, #60]	; (8000b88 <main+0x1ec>)
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	18cb      	adds	r3, r1, r3
 8000b4e:	701a      	strb	r2, [r3, #0]
				// Przepisanie wartoci do tymczasowej i wys³anie
				uint32_t tymczasowa,i;
				tymczasowa = (uint32_t) RMS;
				//tymczasowa = 0x0F0E0D0C;

				for(i=0;i<4;i++)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	f103 0301 	add.w	r3, r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	d9ed      	bls.n	8000b3a <main+0x19e>
				{
					TxBuffer[i] = (tymczasowa>>(8*i)) & 0x000000FF;
				}
				DMA_Cmd(DMA1_Channel4, ENABLE);
 8000b5e:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <main+0x208>)
 8000b60:	f04f 0101 	mov.w	r1, #1
 8000b64:	f000 fbb8 	bl	80012d8 <DMA_Cmd>

				LicznikProbek = 0;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <main+0x1e8>)
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ba8 <main+0x20c>)
 8000b6c:	601a      	str	r2, [r3, #0]
				RMS = 0;
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <main+0x1e4>)
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <main+0x20c>)
 8000b72:	601a      	str	r2, [r3, #0]
			}
			flaga = 0;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <main+0x200>)
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
		}
	}
 8000b7c:	e779      	b.n	8000a72 <main+0xd6>
 8000b7e:	bf00      	nop
 8000b80:	20000234 	.word	0x20000234
 8000b84:	2000020c 	.word	0x2000020c
 8000b88:	20000214 	.word	0x20000214
 8000b8c:	40013800 	.word	0x40013800
 8000b90:	40020008 	.word	0x40020008
 8000b94:	40012400 	.word	0x40012400
 8000b98:	40012c00 	.word	0x40012c00
 8000b9c:	20000114 	.word	0x20000114
 8000ba0:	20000210 	.word	0x20000210
 8000ba4:	40020044 	.word	0x40020044
 8000ba8:	00000000 	.word	0x00000000
 8000bac:	3f800000 	.word	0x3f800000
 8000bb0:	459c4000 	.word	0x459c4000

08000bb4 <Reset_Handler>:
+-----------------------------------------------------------------------------+
| Initialize the process stack pointer
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =__process_stack_end
 8000bb4:	480e      	ldr	r0, [pc, #56]	; (8000bf0 <Reset_Handler+0x3c>)
	msr		PSP, r0
 8000bb6:	f380 8809 	msr	PSP, r0
+-----------------------------------------------------------------------------+
| Initialize .data section
+-----------------------------------------------------------------------------+
*/

	ldr		r1, =__data_init_start
 8000bba:	490e      	ldr	r1, [pc, #56]	; (8000bf4 <Reset_Handler+0x40>)
    ldr		r2, =__data_start
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <Reset_Handler+0x44>)
    ldr		r3, =__data_end
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <Reset_Handler+0x48>)

1:	cmp		r2, r3
 8000bc0:	429a      	cmp	r2, r3
	ittt	lo
 8000bc2:	bf3e      	ittt	cc
	ldrlo	r0, [r1], #4
 8000bc4:	f851 0b04 	ldrcc.w	r0, [r1], #4
	strlo	r0, [r2], #4
 8000bc8:	f842 0b04 	strcc.w	r0, [r2], #4
	blo		1b
 8000bcc:	e7f8      	bcc.n	8000bc0 <Reset_Handler+0xc>
+-----------------------------------------------------------------------------+
| Zero-init .bss section
+-----------------------------------------------------------------------------+
*/

	movs	r0, #0
 8000bce:	2000      	movs	r0, #0
	ldr		r1, =__bss_start
 8000bd0:	490b      	ldr	r1, [pc, #44]	; (8000c00 <Reset_Handler+0x4c>)
	ldr		r2, =__bss_end
 8000bd2:	4a0c      	ldr	r2, [pc, #48]	; (8000c04 <Reset_Handler+0x50>)

1:	cmp		r1, r2
 8000bd4:	4291      	cmp	r1, r2
	itt		lo
 8000bd6:	bf3c      	itt	cc
	strlo	r0, [r1], #4
 8000bd8:	f841 0b04 	strcc.w	r0, [r1], #4
	blo		1b
 8000bdc:	e7fa      	bcc.n	8000bd4 <Reset_Handler+0x20>
+-----------------------------------------------------------------------------+
| Thread mode uses process stack (PSP) and is privileged
+-----------------------------------------------------------------------------+
*/

	movs	r0, #CONTROL_ALTERNATE_STACK
 8000bde:	2002      	movs	r0, #2
	msr		CONTROL, r0
 8000be0:	f380 8814 	msr	CONTROL, r0
	isb
 8000be4:	f3bf 8f6f 	isb	sy
+-----------------------------------------------------------------------------+
| Branch to main() with link
+-----------------------------------------------------------------------------+
*/

	bl		main
 8000be8:	f7ff fed8 	bl	800099c <main>
+-----------------------------------------------------------------------------+
| On return - loop till the end of the world
+-----------------------------------------------------------------------------+
*/

	b		.
 8000bec:	e7fe      	b.n	8000bec <Reset_Handler+0x38>
 8000bee:	0000      	.short	0x0000
 8000bf0:	20000a38 	.word	0x20000a38
 8000bf4:	08003734 	.word	0x08003734
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000110 	.word	0x20000110
 8000c00:	20000110 	.word	0x20000110
 8000c04:	20000238 	.word	0x20000238

08000c08 <ADC1_2_IRQHandler>:
* own handler defined.
*//*-------------------------------------------------------------------------*/

static void __Default_Handler(void) __attribute__ ((interrupt));
static void __Default_Handler(void)
{
 8000c08:	4668      	mov	r0, sp
 8000c0a:	f020 0107 	bic.w	r1, r0, #7
 8000c0e:	468d      	mov	sp, r1
 8000c10:	b481      	push	{r0, r7}
 8000c12:	af00      	add	r7, sp, #0
	while (1);
 8000c14:	e7fe      	b.n	8000c14 <ADC1_2_IRQHandler+0xc>
 8000c16:	bf00      	nop

08000c18 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	f04f 0300 	mov.w	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	f04f 030f 	mov.w	r3, #15
 8000c30:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	78db      	ldrb	r3, [r3, #3]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d03f      	beq.n	8000cba <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <NVIC_Init+0xd0>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	ea6f 0303 	mvn.w	r3, r3
 8000c42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000c46:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000c4a:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	f1c3 0304 	rsb	r3, r3, #4
 8000c52:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	fa22 f303 	lsr.w	r3, r2, r3
 8000c5c:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	785b      	ldrb	r3, [r3, #1]
 8000c62:	461a      	mov	r2, r3
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	789b      	ldrb	r3, [r3, #2]
 8000c70:	461a      	mov	r2, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	ea02 0303 	and.w	r3, r2, r3
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	ea42 0303 	orr.w	r3, r2, r3
 8000c7e:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000c86:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000c88:	4918      	ldr	r1, [pc, #96]	; (8000cec <NVIC_Init+0xd4>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	18cb      	adds	r3, r1, r3
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <NVIC_Init+0xd4>)
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	7812      	ldrb	r2, [r2, #0]
 8000c9e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8000ca2:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	7809      	ldrb	r1, [r1, #0]
 8000ca8:	f001 011f 	and.w	r1, r1, #31
 8000cac:	f04f 0001 	mov.w	r0, #1
 8000cb0:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000cb8:	e011      	b.n	8000cde <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <NVIC_Init+0xd4>)
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	7812      	ldrb	r2, [r2, #0]
 8000cc0:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8000cc4:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	7809      	ldrb	r1, [r1, #0]
 8000cca:	f001 011f 	and.w	r1, r1, #31
 8000cce:	f04f 0001 	mov.w	r0, #1
 8000cd2:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000cd6:	f102 0220 	add.w	r2, r2, #32
 8000cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000cde:	f107 071c 	add.w	r7, r7, #28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000cfa:	f04f 0300 	mov.w	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000d12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d16:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	791b      	ldrb	r3, [r3, #4]
 8000d20:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8000d24:	ea42 0303 	orr.w	r3, r2, r3
 8000d28:	68fa      	ldr	r2, [r7, #12]
 8000d2a:	ea42 0303 	orr.w	r3, r2, r3
 8000d2e:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <ADC_Init+0xb8>)
 8000d40:	ea02 0303 	and.w	r3, r2, r3
 8000d44:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	795b      	ldrb	r3, [r3, #5]
 8000d54:	ea4f 0343 	mov.w	r3, r3, lsl #1
  tmpreg1 &= CR2_CLEAR_Mask;
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8000d58:	ea42 0303 	orr.w	r3, r2, r3
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	ea42 0303 	orr.w	r3, r2, r3
 8000d62:	60fb      	str	r3, [r7, #12]
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6e:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000d76:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	7c1b      	ldrb	r3, [r3, #16]
 8000d7c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	ea42 0303 	orr.w	r3, r2, r3
 8000d88:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 8000d8a:	7afb      	ldrb	r3, [r7, #11]
 8000d8c:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	ea42 0303 	orr.w	r3, r2, r3
 8000d96:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000d9e:	f107 0714 	add.w	r7, r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	fff1f7fd 	.word	0xfff1f7fd

08000dac <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000db8:	78fb      	ldrb	r3, [r7, #3]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d006      	beq.n	8000dcc <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f043 0201 	orr.w	r2, r3, #1
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	e005      	b.n	8000dd8 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f023 0201 	bic.w	r2, r3, #1
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
  }
}
 8000dd8:	f107 070c 	add.w	r7, r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d006      	beq.n	8000e04 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	e005      	b.n	8000e10 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
  }
}
 8000e10:	f107 070c 	add.w	r7, r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f043 0208 	orr.w	r2, r3, #8
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
}
 8000e30:	f107 070c 	add.w	r7, r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f003 0308 	and.w	r3, r3, #8
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <ADC_GetResetCalibrationStatus+0x22>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
 8000e56:	f04f 0301 	mov.w	r3, #1
 8000e5a:	73fb      	strb	r3, [r7, #15]
 8000e5c:	e002      	b.n	8000e64 <ADC_GetResetCalibrationStatus+0x28>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	f107 0714 	add.w	r7, r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f043 0204 	orr.w	r2, r3, #4
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	609a      	str	r2, [r3, #8]
}
 8000e88:	f107 070c 	add.w	r7, r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000e9c:	f04f 0300 	mov.w	r3, #0
 8000ea0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <ADC_GetCalibrationStatus+0x22>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 8000eae:	f04f 0301 	mov.w	r3, #1
 8000eb2:	73fb      	strb	r3, [r7, #15]
 8000eb4:	e002      	b.n	8000ebc <ADC_GetCalibrationStatus+0x28>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 8000eb6:	f04f 0300 	mov.w	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f107 0714 	add.w	r7, r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	70f9      	strb	r1, [r7, #3]
 8000ed6:	70ba      	strb	r2, [r7, #2]
 8000ed8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000eda:	f04f 0300 	mov.w	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000ee6:	78fb      	ldrb	r3, [r7, #3]
 8000ee8:	2b09      	cmp	r3, #9
 8000eea:	d929      	bls.n	8000f40 <ADC_RegularChannelConfig+0x74>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 8000ef2:	78fa      	ldrb	r2, [r7, #3]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000efa:	189b      	adds	r3, r3, r2
 8000efc:	f1a3 031e 	sub.w	r3, r3, #30
 8000f00:	f04f 0207 	mov.w	r2, #7
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	ea6f 0303 	mvn.w	r3, r3
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	ea02 0303 	and.w	r3, r2, r3
 8000f16:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000f18:	7879      	ldrb	r1, [r7, #1]
 8000f1a:	78fa      	ldrb	r2, [r7, #3]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000f22:	189b      	adds	r3, r3, r2
 8000f24:	f1a3 031e 	sub.w	r3, r3, #30
 8000f28:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2c:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	ea42 0303 	orr.w	r3, r2, r3
 8000f36:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	e024      	b.n	8000f8a <ADC_RegularChannelConfig+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8000f46:	78fa      	ldrb	r2, [r7, #3]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000f4e:	189b      	adds	r3, r3, r2
 8000f50:	f04f 0207 	mov.w	r2, #7
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	ea6f 0303 	mvn.w	r3, r3
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	ea02 0303 	and.w	r3, r2, r3
 8000f66:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000f68:	7879      	ldrb	r1, [r7, #1]
 8000f6a:	78fa      	ldrb	r2, [r7, #3]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000f72:	189b      	adds	r3, r3, r2
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	ea42 0303 	orr.w	r3, r2, r3
 8000f82:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000f8a:	78bb      	ldrb	r3, [r7, #2]
 8000f8c:	2b06      	cmp	r3, #6
 8000f8e:	d829      	bhi.n	8000fe4 <ADC_RegularChannelConfig+0x118>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f94:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 8000f96:	78bb      	ldrb	r3, [r7, #2]
 8000f98:	f103 32ff 	add.w	r2, r3, #4294967295
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000fa2:	189b      	adds	r3, r3, r2
 8000fa4:	f04f 021f 	mov.w	r2, #31
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	ea6f 0303 	mvn.w	r3, r3
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	ea02 0303 	and.w	r3, r2, r3
 8000fba:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000fbc:	78f9      	ldrb	r1, [r7, #3]
 8000fbe:	78bb      	ldrb	r3, [r7, #2]
 8000fc0:	f103 32ff 	add.w	r2, r3, #4294967295
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000fca:	189b      	adds	r3, r3, r2
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	ea42 0303 	orr.w	r3, r2, r3
 8000fda:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	635a      	str	r2, [r3, #52]	; 0x34
 8000fe2:	e055      	b.n	8001090 <ADC_RegularChannelConfig+0x1c4>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000fe4:	78bb      	ldrb	r3, [r7, #2]
 8000fe6:	2b0c      	cmp	r3, #12
 8000fe8:	d829      	bhi.n	800103e <ADC_RegularChannelConfig+0x172>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 8000ff0:	78ba      	ldrb	r2, [r7, #2]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000ff8:	189b      	adds	r3, r3, r2
 8000ffa:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 8000ffe:	f04f 021f 	mov.w	r2, #31
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	ea6f 0303 	mvn.w	r3, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	ea02 0303 	and.w	r3, r2, r3
 8001014:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8001016:	78f9      	ldrb	r1, [r7, #3]
 8001018:	78ba      	ldrb	r2, [r7, #2]
 800101a:	4613      	mov	r3, r2
 800101c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001020:	189b      	adds	r3, r3, r2
 8001022:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	ea42 0303 	orr.w	r3, r2, r3
 8001034:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	631a      	str	r2, [r3, #48]	; 0x30
 800103c:	e028      	b.n	8001090 <ADC_RegularChannelConfig+0x1c4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001042:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 8001044:	78ba      	ldrb	r2, [r7, #2]
 8001046:	4613      	mov	r3, r2
 8001048:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800104c:	189b      	adds	r3, r3, r2
 800104e:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 8001052:	f04f 021f 	mov.w	r2, #31
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	ea6f 0303 	mvn.w	r3, r3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	ea02 0303 	and.w	r3, r2, r3
 8001068:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 800106a:	78f9      	ldrb	r1, [r7, #3]
 800106c:	78ba      	ldrb	r2, [r7, #2]
 800106e:	4613      	mov	r3, r2
 8001070:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001074:	189b      	adds	r3, r3, r2
 8001076:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	ea42 0303 	orr.w	r3, r2, r3
 8001088:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8001090:	f107 0714 	add.w	r7, r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <ADC_ExternalTrigConvCmd>:
  * @param  NewState: new state of the selected ADC external trigger start of conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d006      	beq.n	80010bc <ADC_ExternalTrigConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	e005      	b.n	80010c8 <ADC_ExternalTrigConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	609a      	str	r2, [r3, #8]
  }
}
 80010c8:	f107 070c 	add.w	r7, r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop

080010d4 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80010e4:	ea02 0303 	and.w	r3, r2, r3
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	4b43      	ldr	r3, [pc, #268]	; (800121c <DMA_DeInit+0x148>)
 8001110:	429a      	cmp	r2, r3
 8001112:	d106      	bne.n	8001122 <DMA_DeInit+0x4e>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 8001114:	4b42      	ldr	r3, [pc, #264]	; (8001220 <DMA_DeInit+0x14c>)
 8001116:	4a42      	ldr	r2, [pc, #264]	; (8001220 <DMA_DeInit+0x14c>)
 8001118:	6852      	ldr	r2, [r2, #4]
 800111a:	f042 020f 	orr.w	r2, r2, #15
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	e077      	b.n	8001212 <DMA_DeInit+0x13e>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <DMA_DeInit+0x150>)
 8001126:	429a      	cmp	r2, r3
 8001128:	d106      	bne.n	8001138 <DMA_DeInit+0x64>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 800112a:	4b3d      	ldr	r3, [pc, #244]	; (8001220 <DMA_DeInit+0x14c>)
 800112c:	4a3c      	ldr	r2, [pc, #240]	; (8001220 <DMA_DeInit+0x14c>)
 800112e:	6852      	ldr	r2, [r2, #4]
 8001130:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	e06c      	b.n	8001212 <DMA_DeInit+0x13e>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <DMA_DeInit+0x154>)
 800113c:	429a      	cmp	r2, r3
 800113e:	d106      	bne.n	800114e <DMA_DeInit+0x7a>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8001140:	4b37      	ldr	r3, [pc, #220]	; (8001220 <DMA_DeInit+0x14c>)
 8001142:	4a37      	ldr	r2, [pc, #220]	; (8001220 <DMA_DeInit+0x14c>)
 8001144:	6852      	ldr	r2, [r2, #4]
 8001146:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	e061      	b.n	8001212 <DMA_DeInit+0x13e>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	4b36      	ldr	r3, [pc, #216]	; (800122c <DMA_DeInit+0x158>)
 8001152:	429a      	cmp	r2, r3
 8001154:	d106      	bne.n	8001164 <DMA_DeInit+0x90>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8001156:	4b32      	ldr	r3, [pc, #200]	; (8001220 <DMA_DeInit+0x14c>)
 8001158:	4a31      	ldr	r2, [pc, #196]	; (8001220 <DMA_DeInit+0x14c>)
 800115a:	6852      	ldr	r2, [r2, #4]
 800115c:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	e056      	b.n	8001212 <DMA_DeInit+0x13e>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	4b32      	ldr	r3, [pc, #200]	; (8001230 <DMA_DeInit+0x15c>)
 8001168:	429a      	cmp	r2, r3
 800116a:	d106      	bne.n	800117a <DMA_DeInit+0xa6>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 800116c:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <DMA_DeInit+0x14c>)
 800116e:	4a2c      	ldr	r2, [pc, #176]	; (8001220 <DMA_DeInit+0x14c>)
 8001170:	6852      	ldr	r2, [r2, #4]
 8001172:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	e04b      	b.n	8001212 <DMA_DeInit+0x13e>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <DMA_DeInit+0x160>)
 800117e:	429a      	cmp	r2, r3
 8001180:	d106      	bne.n	8001190 <DMA_DeInit+0xbc>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8001182:	4b27      	ldr	r3, [pc, #156]	; (8001220 <DMA_DeInit+0x14c>)
 8001184:	4a26      	ldr	r2, [pc, #152]	; (8001220 <DMA_DeInit+0x14c>)
 8001186:	6852      	ldr	r2, [r2, #4]
 8001188:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	e040      	b.n	8001212 <DMA_DeInit+0x13e>
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	4b29      	ldr	r3, [pc, #164]	; (8001238 <DMA_DeInit+0x164>)
 8001194:	429a      	cmp	r2, r3
 8001196:	d106      	bne.n	80011a6 <DMA_DeInit+0xd2>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8001198:	4b21      	ldr	r3, [pc, #132]	; (8001220 <DMA_DeInit+0x14c>)
 800119a:	4a21      	ldr	r2, [pc, #132]	; (8001220 <DMA_DeInit+0x14c>)
 800119c:	6852      	ldr	r2, [r2, #4]
 800119e:	f042 6270 	orr.w	r2, r2, #251658240	; 0xf000000
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	e035      	b.n	8001212 <DMA_DeInit+0x13e>
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	4b24      	ldr	r3, [pc, #144]	; (800123c <DMA_DeInit+0x168>)
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d106      	bne.n	80011bc <DMA_DeInit+0xe8>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 80011ae:	4b24      	ldr	r3, [pc, #144]	; (8001240 <DMA_DeInit+0x16c>)
 80011b0:	4a23      	ldr	r2, [pc, #140]	; (8001240 <DMA_DeInit+0x16c>)
 80011b2:	6852      	ldr	r2, [r2, #4]
 80011b4:	f042 020f 	orr.w	r2, r2, #15
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	e02a      	b.n	8001212 <DMA_DeInit+0x13e>
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <DMA_DeInit+0x170>)
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d106      	bne.n	80011d2 <DMA_DeInit+0xfe>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <DMA_DeInit+0x16c>)
 80011c6:	4a1e      	ldr	r2, [pc, #120]	; (8001240 <DMA_DeInit+0x16c>)
 80011c8:	6852      	ldr	r2, [r2, #4]
 80011ca:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	e01f      	b.n	8001212 <DMA_DeInit+0x13e>
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <DMA_DeInit+0x174>)
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d106      	bne.n	80011e8 <DMA_DeInit+0x114>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <DMA_DeInit+0x16c>)
 80011dc:	4a18      	ldr	r2, [pc, #96]	; (8001240 <DMA_DeInit+0x16c>)
 80011de:	6852      	ldr	r2, [r2, #4]
 80011e0:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	e014      	b.n	8001212 <DMA_DeInit+0x13e>
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <DMA_DeInit+0x178>)
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d106      	bne.n	80011fe <DMA_DeInit+0x12a>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <DMA_DeInit+0x16c>)
 80011f2:	4a13      	ldr	r2, [pc, #76]	; (8001240 <DMA_DeInit+0x16c>)
 80011f4:	6852      	ldr	r2, [r2, #4]
 80011f6:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	e009      	b.n	8001212 <DMA_DeInit+0x13e>
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <DMA_DeInit+0x17c>)
 8001202:	429a      	cmp	r2, r3
 8001204:	d105      	bne.n	8001212 <DMA_DeInit+0x13e>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <DMA_DeInit+0x16c>)
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <DMA_DeInit+0x16c>)
 800120a:	6852      	ldr	r2, [r2, #4]
 800120c:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 8001210:	605a      	str	r2, [r3, #4]
    }
  }
}
 8001212:	f107 070c 	add.w	r7, r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	40020008 	.word	0x40020008
 8001220:	40020000 	.word	0x40020000
 8001224:	4002001c 	.word	0x4002001c
 8001228:	40020030 	.word	0x40020030
 800122c:	40020044 	.word	0x40020044
 8001230:	40020058 	.word	0x40020058
 8001234:	4002006c 	.word	0x4002006c
 8001238:	40020080 	.word	0x40020080
 800123c:	40020408 	.word	0x40020408
 8001240:	40020400 	.word	0x40020400
 8001244:	4002041c 	.word	0x4002041c
 8001248:	40020430 	.word	0x40020430
 800124c:	40020444 	.word	0x40020444
 8001250:	40020458 	.word	0x40020458

08001254 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800125e:	f04f 0300 	mov.w	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001270:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001274:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001284:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001290:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800129c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a2:	ea42 0303 	orr.w	r3, r2, r3
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	ea42 0303 	orr.w	r3, r2, r3
 80012ac:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	60da      	str	r2, [r3, #12]
}
 80012cc:	f107 0714 	add.w	r7, r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop

080012d8 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d006      	beq.n	80012f8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f043 0201 	orr.w	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	e007      	b.n	8001308 <DMA_Cmd+0x30>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001300:	ea02 0303 	and.w	r3, r2, r3
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6013      	str	r3, [r2, #0]
  }
}
 8001308:	f107 070c 	add.w	r7, r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop

08001314 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	4613      	mov	r3, r2
 8001320:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d006      	beq.n	8001336 <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	431a      	orrs	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	e007      	b.n	8001346 <DMA_ITConfig+0x32>
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	ea6f 0303 	mvn.w	r3, r3
 8001340:	401a      	ands	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	601a      	str	r2, [r3, #0]
  }
}
 8001346:	f107 0714 	add.w	r7, r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <DMA_ClearFlag+0x2c>)
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	e002      	b.n	8001370 <DMA_ClearFlag+0x20>
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <DMA_ClearFlag+0x30>)
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	605a      	str	r2, [r3, #4]
  }
}
 8001370:	f107 070c 	add.w	r7, r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40020400 	.word	0x40020400
 8001380:	40020000 	.word	0x40020000

08001384 <DMA_GetITStatus>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval The new state of DMAy_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMAy_IT));

  /* Calculate the used DMA */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <DMA_GetITStatus+0x26>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <DMA_GetITStatus+0x54>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	e002      	b.n	80013b0 <DMA_GetITStatus+0x2c>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <DMA_GetITStatus+0x58>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy interrupt */
  if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	ea02 0303 	and.w	r3, r2, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <DMA_GetITStatus+0x40>
  {
    /* DMAy_IT is set */
    bitstatus = SET;
 80013bc:	f04f 0301 	mov.w	r3, #1
 80013c0:	73fb      	strb	r3, [r7, #15]
 80013c2:	e002      	b.n	80013ca <DMA_GetITStatus+0x46>
  }
  else
  {
    /* DMAy_IT is reset */
    bitstatus = RESET;
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMA_IT status */
  return  bitstatus;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	f107 0714 	add.w	r7, r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	40020400 	.word	0x40020400
 80013dc:	40020000 	.word	0x40020000

080013e0 <DMA_ClearITPendingBit>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval None
  */
void DMA_ClearITPendingBit(uint32_t DMAy_IT)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMAy_IT));

  /* Calculate the used DMAy */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <DMA_ClearITPendingBit+0x1a>
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA2->IFCR = DMAy_IT;
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <DMA_ClearITPendingBit+0x2c>)
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	e002      	b.n	8001400 <DMA_ClearITPendingBit+0x20>
  }
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA1->IFCR = DMAy_IT;
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <DMA_ClearITPendingBit+0x30>)
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	605a      	str	r2, [r3, #4]
  }
}
 8001400:	f107 070c 	add.w	r7, r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40020400 	.word	0x40020400
 8001410:	40020000 	.word	0x40020000

08001414 <FLASH_SetLatency>:
  *     @arg FLASH_Latency_1: FLASH One Latency cycle
  *     @arg FLASH_Latency_2: FLASH Two Latency cycles
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <FLASH_SetLatency+0x38>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	60fb      	str	r3, [r7, #12]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800142e:	60fb      	str	r3, [r7, #12]
  tmpreg |= FLASH_Latency;
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	ea42 0303 	orr.w	r3, r2, r3
 8001438:	60fb      	str	r3, [r7, #12]
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <FLASH_SetLatency+0x38>)
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	601a      	str	r2, [r3, #0]
}
 8001440:	f107 0714 	add.w	r7, r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40022000 	.word	0x40022000

08001450 <FLASH_PrefetchBufferCmd>:
  *     @arg FLASH_PrefetchBuffer_Enable: FLASH Prefetch Buffer Enable
  *     @arg FLASH_PrefetchBuffer_Disable: FLASH Prefetch Buffer Disable
  * @retval None
  */
void FLASH_PrefetchBufferCmd(uint32_t FLASH_PrefetchBuffer)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <FLASH_PrefetchBufferCmd+0x2c>)
 800145a:	4a08      	ldr	r2, [pc, #32]	; (800147c <FLASH_PrefetchBufferCmd+0x2c>)
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	f022 0210 	bic.w	r2, r2, #16
 8001462:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <FLASH_PrefetchBufferCmd+0x2c>)
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <FLASH_PrefetchBufferCmd+0x2c>)
 8001468:	6811      	ldr	r1, [r2, #0]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	ea41 0202 	orr.w	r2, r1, r2
 8001470:	601a      	str	r2, [r3, #0]
}
 8001472:	f107 070c 	add.w	r7, r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	40022000 	.word	0x40022000

08001480 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	; 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	78db      	ldrb	r3, [r3, #3]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	78db      	ldrb	r3, [r3, #3]
 80014bc:	f003 0310 	and.w	r3, r3, #16
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <GPIO_Init+0x50>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	789b      	ldrb	r3, [r3, #2]
 80014c8:	69fa      	ldr	r2, [r7, #28]
 80014ca:	ea42 0303 	orr.w	r3, r2, r3
 80014ce:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d051      	beq.n	8001580 <GPIO_Init+0x100>
  {
    tmpreg = GPIOx->CRL;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]
 80014e8:	e044      	b.n	8001574 <GPIO_Init+0xf4>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	f04f 0201 	mov.w	r2, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	ea02 0303 	and.w	r3, r2, r3
 8001502:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	429a      	cmp	r2, r3
 800150a:	d12f      	bne.n	800156c <GPIO_Init+0xec>
      {
        pos = pinpos << 2;
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001512:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f04f 020f 	mov.w	r2, #15
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	ea6f 0303 	mvn.w	r3, r3
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	ea02 0303 	and.w	r3, r2, r3
 800152c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	69fa      	ldr	r2, [r7, #28]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	ea42 0303 	orr.w	r3, r2, r3
 800153c:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	78db      	ldrb	r3, [r3, #3]
 8001542:	2b28      	cmp	r3, #40	; 0x28
 8001544:	d107      	bne.n	8001556 <GPIO_Init+0xd6>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	f04f 0201 	mov.w	r2, #1
 800154c:	fa02 f203 	lsl.w	r2, r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	615a      	str	r2, [r3, #20]
 8001554:	e00a      	b.n	800156c <GPIO_Init+0xec>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	78db      	ldrb	r3, [r3, #3]
 800155a:	2b48      	cmp	r3, #72	; 0x48
 800155c:	d106      	bne.n	800156c <GPIO_Init+0xec>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	f04f 0201 	mov.w	r2, #1
 8001564:	fa02 f203 	lsl.w	r2, r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	f103 0301 	add.w	r3, r3, #1
 8001572:	61bb      	str	r3, [r7, #24]
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2b07      	cmp	r3, #7
 8001578:	d9b7      	bls.n	80014ea <GPIO_Init+0x6a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	2bff      	cmp	r3, #255	; 0xff
 8001586:	d956      	bls.n	8001636 <GPIO_Init+0x1b6>
  {
    tmpreg = GPIOx->CRH;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	61bb      	str	r3, [r7, #24]
 8001594:	e049      	b.n	800162a <GPIO_Init+0x1aa>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	f103 0308 	add.w	r3, r3, #8
 800159c:	f04f 0201 	mov.w	r2, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	ea02 0303 	and.w	r3, r2, r3
 80015b2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d132      	bne.n	8001622 <GPIO_Init+0x1a2>
      {
        pos = pinpos << 2;
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80015c2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f04f 020f 	mov.w	r2, #15
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	ea6f 0303 	mvn.w	r3, r3
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	ea02 0303 	and.w	r3, r2, r3
 80015dc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	ea42 0303 	orr.w	r3, r2, r3
 80015ec:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	78db      	ldrb	r3, [r3, #3]
 80015f2:	2b28      	cmp	r3, #40	; 0x28
 80015f4:	d108      	bne.n	8001608 <GPIO_Init+0x188>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	f103 0308 	add.w	r3, r3, #8
 80015fc:	f04f 0201 	mov.w	r2, #1
 8001600:	fa02 f203 	lsl.w	r2, r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	78db      	ldrb	r3, [r3, #3]
 800160c:	2b48      	cmp	r3, #72	; 0x48
 800160e:	d108      	bne.n	8001622 <GPIO_Init+0x1a2>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	f103 0308 	add.w	r3, r3, #8
 8001616:	f04f 0201 	mov.w	r2, #1
 800161a:	fa02 f203 	lsl.w	r2, r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	f103 0301 	add.w	r3, r3, #1
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	2b07      	cmp	r3, #7
 800162e:	d9b2      	bls.n	8001596 <GPIO_Init+0x116>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	605a      	str	r2, [r3, #4]
  }
}
 8001636:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 800164c:	887a      	ldrh	r2, [r7, #2]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	615a      	str	r2, [r3, #20]
}
 8001652:	f107 070c 	add.w	r7, r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 800165c:	b480      	push	{r7}
 800165e:	b087      	sub	sp, #28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	da03      	bge.n	800168e <GPIO_PinRemapConfig+0x32>
  {
    tmpreg = AFIO->MAPR2;
 8001686:	4b35      	ldr	r3, [pc, #212]	; (800175c <GPIO_PinRemapConfig+0x100>)
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	e002      	b.n	8001694 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 800168e:	4b33      	ldr	r3, [pc, #204]	; (800175c <GPIO_PinRemapConfig+0x100>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800169a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800169e:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80016a6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80016aa:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80016b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80016b6:	d10a      	bne.n	80016ce <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80016be:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80016c0:	4b26      	ldr	r3, [pc, #152]	; (800175c <GPIO_PinRemapConfig+0x100>)
 80016c2:	4a26      	ldr	r2, [pc, #152]	; (800175c <GPIO_PinRemapConfig+0x100>)
 80016c4:	6852      	ldr	r2, [r2, #4]
 80016c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	e028      	b.n	8001720 <GPIO_PinRemapConfig+0xc4>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d011      	beq.n	80016fc <GPIO_PinRemapConfig+0xa0>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	f04f 0203 	mov.w	r2, #3
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	ea6f 0303 	mvn.w	r3, r3
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	ea02 0303 	and.w	r3, r2, r3
 80016f0:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	e011      	b.n	8001720 <GPIO_PinRemapConfig+0xc4>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	ea4f 5353 	mov.w	r3, r3, lsr #21
 8001702:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	ea6f 0303 	mvn.w	r3, r3
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	ea02 0303 	and.w	r3, r2, r3
 8001716:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800171e:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00b      	beq.n	800173e <GPIO_PinRemapConfig+0xe2>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	ea4f 5353 	mov.w	r3, r3, lsr #21
 800172c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	ea42 0303 	orr.w	r3, r2, r3
 800173c:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	da03      	bge.n	800174c <GPIO_PinRemapConfig+0xf0>
  {
    AFIO->MAPR2 = tmpreg;
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <GPIO_PinRemapConfig+0x100>)
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	61da      	str	r2, [r3, #28]
 800174a:	e002      	b.n	8001752 <GPIO_PinRemapConfig+0xf6>
  }
  else
  {
    AFIO->MAPR = tmpreg;
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <GPIO_PinRemapConfig+0x100>)
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	605a      	str	r2, [r3, #4]
  }  
}
 8001752:	f107 071c 	add.w	r7, r7, #28
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	40010000 	.word	0x40010000

08001760 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <RCC_DeInit+0x68>)
 8001766:	4a18      	ldr	r2, [pc, #96]	; (80017c8 <RCC_DeInit+0x68>)
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	f042 0201 	orr.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
 8001770:	4a15      	ldr	r2, [pc, #84]	; (80017c8 <RCC_DeInit+0x68>)
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <RCC_DeInit+0x68>)
 8001774:	6859      	ldr	r1, [r3, #4]
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <RCC_DeInit+0x6c>)
 8001778:	ea01 0303 	and.w	r3, r1, r3
 800177c:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <RCC_DeInit+0x68>)
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <RCC_DeInit+0x68>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800178c:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <RCC_DeInit+0x68>)
 8001790:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <RCC_DeInit+0x68>)
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001798:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <RCC_DeInit+0x68>)
 800179c:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <RCC_DeInit+0x68>)
 800179e:	6852      	ldr	r2, [r2, #4]
 80017a0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80017a4:	605a      	str	r2, [r3, #4]

#ifdef STM32F10X_CL
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <RCC_DeInit+0x68>)
 80017a8:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <RCC_DeInit+0x68>)
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 80017b0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <RCC_DeInit+0x68>)
 80017b4:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80017b8:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
 80017ba:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <RCC_DeInit+0x68>)
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
#endif /* STM32F10X_CL */

}
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	40021000 	.word	0x40021000
 80017cc:	f0ff0000 	.word	0xf0ff0000

080017d0 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <RCC_HSEConfig+0x58>)
 80017da:	4a13      	ldr	r2, [pc, #76]	; (8001828 <RCC_HSEConfig+0x58>)
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017e2:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 80017e4:	4b10      	ldr	r3, [pc, #64]	; (8001828 <RCC_HSEConfig+0x58>)
 80017e6:	4a10      	ldr	r2, [pc, #64]	; (8001828 <RCC_HSEConfig+0x58>)
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017ee:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f6:	d003      	beq.n	8001800 <RCC_HSEConfig+0x30>
 80017f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017fc:	d007      	beq.n	800180e <RCC_HSEConfig+0x3e>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 80017fe:	e00d      	b.n	800181c <RCC_HSEConfig+0x4c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <RCC_HSEConfig+0x58>)
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <RCC_HSEConfig+0x58>)
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800180a:	601a      	str	r2, [r3, #0]
      break;
 800180c:	e006      	b.n	800181c <RCC_HSEConfig+0x4c>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <RCC_HSEConfig+0x58>)
 8001810:	4a05      	ldr	r2, [pc, #20]	; (8001828 <RCC_HSEConfig+0x58>)
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8001818:	601a      	str	r2, [r3, #0]
      break;
 800181a:	bf00      	nop
      
    default:
      break;
  }
}
 800181c:	f107 070c 	add.w	r7, r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000

0800182c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001844:	f04f 0031 	mov.w	r0, #49	; 0x31
 8001848:	f000 fa3a 	bl	8001cc0 <RCC_GetFlagStatus>
 800184c:	4603      	mov	r3, r0
 800184e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f103 0301 	add.w	r3, r3, #1
 8001856:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800185e:	d002      	beq.n	8001866 <RCC_WaitForHSEStartUp+0x3a>
 8001860:	79bb      	ldrb	r3, [r7, #6]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0ee      	beq.n	8001844 <RCC_WaitForHSEStartUp+0x18>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001866:	f04f 0031 	mov.w	r0, #49	; 0x31
 800186a:	f000 fa29 	bl	8001cc0 <RCC_GetFlagStatus>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 8001874:	f04f 0301 	mov.w	r3, #1
 8001878:	71fb      	strb	r3, [r7, #7]
 800187a:	e002      	b.n	8001882 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 8001882:	79fb      	ldrb	r3, [r7, #7]
}
 8001884:	4618      	mov	r0, r3
 8001886:	f107 0708 	add.w	r7, r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop

08001890 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <RCC_PLLConfig+0x40>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80018ac:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	ea42 0303 	orr.w	r3, r2, r3
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	ea42 0303 	orr.w	r3, r2, r3
 80018bc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80018be:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <RCC_PLLConfig+0x40>)
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	605a      	str	r2, [r3, #4]
}
 80018c4:	f107 0714 	add.w	r7, r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000

080018d4 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80018de:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <RCC_PLLCmd+0x1c>)
 80018e0:	79fa      	ldrb	r2, [r7, #7]
 80018e2:	601a      	str	r2, [r3, #0]
}
 80018e4:	f107 070c 	add.w	r7, r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	42420060 	.word	0x42420060

080018f4 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <RCC_SYSCLKConfig+0x38>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f023 0303 	bic.w	r3, r3, #3
 800190e:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	ea42 0303 	orr.w	r3, r2, r3
 8001918:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <RCC_SYSCLKConfig+0x38>)
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	605a      	str	r2, [r3, #4]
}
 8001920:	f107 0714 	add.w	r7, r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000

08001930 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <RCC_GetSYSCLKSource+0x18>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	b2db      	uxtb	r3, r3
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	40021000 	.word	0x40021000

0800194c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <RCC_HCLKConfig+0x38>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001966:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	ea42 0303 	orr.w	r3, r2, r3
 8001970:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <RCC_HCLKConfig+0x38>)
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	605a      	str	r2, [r3, #4]
}
 8001978:	f107 0714 	add.w	r7, r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000

08001988 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <RCC_PCLK1Config+0x38>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019a2:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	ea42 0303 	orr.w	r3, r2, r3
 80019ac:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80019ae:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <RCC_PCLK1Config+0x38>)
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	605a      	str	r2, [r3, #4]
}
 80019b4:	f107 0714 	add.w	r7, r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000

080019c4 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <RCC_PCLK2Config+0x3c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80019de:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	ea42 0303 	orr.w	r3, r2, r3
 80019ec:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80019ee:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <RCC_PCLK2Config+0x3c>)
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	605a      	str	r2, [r3, #4]
}
 80019f4:	f107 0714 	add.w	r7, r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000

08001a04 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <RCC_ADCCLKConfig+0x38>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a1e:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	ea42 0303 	orr.w	r3, r2, r3
 8001a28:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001a2a:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <RCC_ADCCLKConfig+0x38>)
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	605a      	str	r2, [r3, #4]
}
 8001a30:	f107 0714 	add.w	r7, r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000

08001a40 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b08b      	sub	sp, #44	; 0x2c
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	61bb      	str	r3, [r7, #24]

#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001a78:	4b69      	ldr	r3, [pc, #420]	; (8001c20 <RCC_GetClocksFreq+0x1e0>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d007      	beq.n	8001a98 <RCC_GetClocksFreq+0x58>
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d009      	beq.n	8001aa0 <RCC_GetClocksFreq+0x60>
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d165      	bne.n	8001b5c <RCC_GetClocksFreq+0x11c>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a64      	ldr	r2, [pc, #400]	; (8001c24 <RCC_GetClocksFreq+0x1e4>)
 8001a94:	601a      	str	r2, [r3, #0]
      break;
 8001a96:	e065      	b.n	8001b64 <RCC_GetClocksFreq+0x124>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a63      	ldr	r2, [pc, #396]	; (8001c28 <RCC_GetClocksFreq+0x1e8>)
 8001a9c:	601a      	str	r2, [r3, #0]
      break;
 8001a9e:	e061      	b.n	8001b64 <RCC_GetClocksFreq+0x124>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001aa0:	4b5f      	ldr	r3, [pc, #380]	; (8001c20 <RCC_GetClocksFreq+0x1e0>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001aaa:	4b5d      	ldr	r3, [pc, #372]	; (8001c20 <RCC_GetClocksFreq+0x1e0>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab2:	61fb      	str	r3, [r7, #28]
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
        }
 #endif
      }
#else
      pllmull = pllmull >> 18;
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
      
      if (pllmull != 0x0D)
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	2b0d      	cmp	r3, #13
 8001ac0:	d004      	beq.n	8001acc <RCC_GetClocksFreq+0x8c>
      {
         pllmull += 2;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	f103 0302 	add.w	r3, r3, #2
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aca:	e002      	b.n	8001ad2 <RCC_GetClocksFreq+0x92>
      }
      else
      { /* PLL multiplication factor = PLL input clock * 6.5 */
        pllmull = 13 / 2; 
 8001acc:	f04f 0306 	mov.w	r3, #6
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
      }
            
      if (pllsource == 0x00)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d106      	bne.n	8001ae6 <RCC_GetClocksFreq+0xa6>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	4a54      	ldr	r2, [pc, #336]	; (8001c2c <RCC_GetClocksFreq+0x1ec>)
 8001adc:	fb02 f203 	mul.w	r2, r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001ae4:	e03e      	b.n	8001b64 <RCC_GetClocksFreq+0x124>
      }
      else
      {/* PREDIV1 selected as PLL clock entry */
        
        /* Get PREDIV1 clock source and division factor */
        prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 8001ae6:	4b4e      	ldr	r3, [pc, #312]	; (8001c20 <RCC_GetClocksFreq+0x1e0>)
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aee:	617b      	str	r3, [r7, #20]
        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 8001af0:	4b4b      	ldr	r3, [pc, #300]	; (8001c20 <RCC_GetClocksFreq+0x1e0>)
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af4:	f003 030f 	and.w	r3, r3, #15
 8001af8:	f103 0301 	add.w	r3, r3, #1
 8001afc:	613b      	str	r3, [r7, #16]
        
        if (prediv1source == 0)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d109      	bne.n	8001b18 <RCC_GetClocksFreq+0xd8>
        { /* HSE oscillator clock selected as PREDIV1 clock entry */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;          
 8001b04:	4a48      	ldr	r2, [pc, #288]	; (8001c28 <RCC_GetClocksFreq+0x1e8>)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b0e:	fb02 f203 	mul.w	r2, r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001b16:	e025      	b.n	8001b64 <RCC_GetClocksFreq+0x124>
        }
        else
        {/* PLL2 clock selected as PREDIV1 clock entry */
          
          /* Get PREDIV2 division factor and PLL2 multiplication factor */
          prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 8001b18:	4b41      	ldr	r3, [pc, #260]	; (8001c20 <RCC_GetClocksFreq+0x1e0>)
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b20:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8001b24:	f103 0301 	add.w	r3, r3, #1
 8001b28:	60fb      	str	r3, [r7, #12]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	; (8001c20 <RCC_GetClocksFreq+0x1e0>)
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001b32:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001b36:	f103 0302 	add.w	r3, r3, #2
 8001b3a:	60bb      	str	r3, [r7, #8]
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
 8001b3c:	4a3a      	ldr	r2, [pc, #232]	; (8001c28 <RCC_GetClocksFreq+0x1e8>)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	fb02 f203 	mul.w	r2, r2, r3
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b52:	fb02 f203 	mul.w	r2, r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	601a      	str	r2, [r3, #0]
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001b5a:	e003      	b.n	8001b64 <RCC_GetClocksFreq+0x124>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a31      	ldr	r2, [pc, #196]	; (8001c24 <RCC_GetClocksFreq+0x1e4>)
 8001b60:	601a      	str	r2, [r3, #0]
      break;
 8001b62:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001b64:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <RCC_GetClocksFreq+0x1e0>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b6c:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8001b74:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8001b76:	4a2e      	ldr	r2, [pc, #184]	; (8001c30 <RCC_GetClocksFreq+0x1f0>)
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	18d3      	adds	r3, r2, r3
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	61bb      	str	r3, [r7, #24]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	fa22 f203 	lsr.w	r2, r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001b90:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <RCC_GetClocksFreq+0x1e0>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b98:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001ba0:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8001ba2:	4a23      	ldr	r2, [pc, #140]	; (8001c30 <RCC_GetClocksFreq+0x1f0>)
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	18d3      	adds	r3, r2, r3
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	61bb      	str	r3, [r7, #24]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	fa22 f203 	lsr.w	r2, r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <RCC_GetClocksFreq+0x1e0>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001bc4:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8001bcc:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8001bce:	4a18      	ldr	r2, [pc, #96]	; (8001c30 <RCC_GetClocksFreq+0x1f0>)
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	18d3      	adds	r3, r2, r3
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	61bb      	str	r3, [r7, #24]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	fa22 f203 	lsr.w	r2, r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <RCC_GetClocksFreq+0x1e0>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bf0:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 14;
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	ea4f 3393 	mov.w	r3, r3, lsr #14
 8001bf8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8001bfa:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <RCC_GetClocksFreq+0x1f4>)
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	18d3      	adds	r3, r2, r3
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	61bb      	str	r3, [r7, #24]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	611a      	str	r2, [r3, #16]
}
 8001c14:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
 8001c24:	007a1200 	.word	0x007a1200
 8001c28:	00989680 	.word	0x00989680
 8001c2c:	003d0900 	.word	0x003d0900
 8001c30:	20000004 	.word	0x20000004
 8001c34:	20000014 	.word	0x20000014

08001c38 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d007      	beq.n	8001c5a <RCC_AHBPeriphClockCmd+0x22>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <RCC_AHBPeriphClockCmd+0x40>)
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <RCC_AHBPeriphClockCmd+0x40>)
 8001c4e:	6951      	ldr	r1, [r2, #20]
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	ea41 0202 	orr.w	r2, r1, r2
 8001c56:	615a      	str	r2, [r3, #20]
 8001c58:	e008      	b.n	8001c6c <RCC_AHBPeriphClockCmd+0x34>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <RCC_AHBPeriphClockCmd+0x40>)
 8001c5c:	4a06      	ldr	r2, [pc, #24]	; (8001c78 <RCC_AHBPeriphClockCmd+0x40>)
 8001c5e:	6951      	ldr	r1, [r2, #20]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	ea6f 0202 	mvn.w	r2, r2
 8001c66:	ea01 0202 	and.w	r2, r1, r2
 8001c6a:	615a      	str	r2, [r3, #20]
  }
}
 8001c6c:	f107 070c 	add.w	r7, r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000

08001c7c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <RCC_APB2PeriphClockCmd+0x22>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <RCC_APB2PeriphClockCmd+0x40>)
 8001c90:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <RCC_APB2PeriphClockCmd+0x40>)
 8001c92:	6991      	ldr	r1, [r2, #24]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	ea41 0202 	orr.w	r2, r1, r2
 8001c9a:	619a      	str	r2, [r3, #24]
 8001c9c:	e008      	b.n	8001cb0 <RCC_APB2PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <RCC_APB2PeriphClockCmd+0x40>)
 8001ca0:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <RCC_APB2PeriphClockCmd+0x40>)
 8001ca2:	6991      	ldr	r1, [r2, #24]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	ea6f 0202 	mvn.w	r2, r2
 8001caa:	ea01 0202 	and.w	r2, r1, r2
 8001cae:	619a      	str	r2, [r3, #24]
  }
}
 8001cb0:	f107 070c 	add.w	r7, r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001cd6:	f04f 0300 	mov.w	r3, #0
 8001cda:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d103      	bne.n	8001cf4 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <RCC_GetFlagStatus+0x80>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	e009      	b.n	8001d08 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d103      	bne.n	8001d02 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <RCC_GetFlagStatus+0x80>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	e002      	b.n	8001d08 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <RCC_GetFlagStatus+0x80>)
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
 8001d22:	f04f 0301 	mov.w	r3, #1
 8001d26:	74fb      	strb	r3, [r7, #19]
 8001d28:	e002      	b.n	8001d30 <RCC_GetFlagStatus+0x70>
  }
  else
  {
    bitstatus = RESET;
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 8001d30:	7cfb      	ldrb	r3, [r7, #19]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	f107 071c 	add.w	r7, r7, #28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000

08001d44 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	4b2f      	ldr	r3, [pc, #188]	; (8001e1c <TIM_TimeBaseInit+0xd8>)
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d013      	beq.n	8001d8a <TIM_TimeBaseInit+0x46>
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	4b2e      	ldr	r3, [pc, #184]	; (8001e20 <TIM_TimeBaseInit+0xdc>)
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d00f      	beq.n	8001d8a <TIM_TimeBaseInit+0x46>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d70:	d00b      	beq.n	8001d8a <TIM_TimeBaseInit+0x46>
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <TIM_TimeBaseInit+0xe0>)
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d007      	beq.n	8001d8a <TIM_TimeBaseInit+0x46>
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <TIM_TimeBaseInit+0xe4>)
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d003      	beq.n	8001d8a <TIM_TimeBaseInit+0x46>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	4b29      	ldr	r3, [pc, #164]	; (8001e2c <TIM_TimeBaseInit+0xe8>)
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d109      	bne.n	8001d9e <TIM_TimeBaseInit+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001d8a:	89fb      	ldrh	r3, [r7, #14]
 8001d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d90:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	885a      	ldrh	r2, [r3, #2]
 8001d96:	89fb      	ldrh	r3, [r7, #14]
 8001d98:	ea42 0303 	orr.w	r3, r2, r3
 8001d9c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	4b23      	ldr	r3, [pc, #140]	; (8001e30 <TIM_TimeBaseInit+0xec>)
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d00d      	beq.n	8001dc2 <TIM_TimeBaseInit+0x7e>
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	4b22      	ldr	r3, [pc, #136]	; (8001e34 <TIM_TimeBaseInit+0xf0>)
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d009      	beq.n	8001dc2 <TIM_TimeBaseInit+0x7e>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001dae:	89fb      	ldrh	r3, [r7, #14]
 8001db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001db4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	88da      	ldrh	r2, [r3, #6]
 8001dba:	89fb      	ldrh	r3, [r7, #14]
 8001dbc:	ea42 0303 	orr.w	r3, r2, r3
 8001dc0:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	89fa      	ldrh	r2, [r7, #14]
 8001dc6:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	889a      	ldrh	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	881a      	ldrh	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <TIM_TimeBaseInit+0xd8>)
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d00f      	beq.n	8001e00 <TIM_TimeBaseInit+0xbc>
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <TIM_TimeBaseInit+0xdc>)
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d00b      	beq.n	8001e00 <TIM_TimeBaseInit+0xbc>
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <TIM_TimeBaseInit+0xf4>)
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d007      	beq.n	8001e00 <TIM_TimeBaseInit+0xbc>
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <TIM_TimeBaseInit+0xf8>)
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d003      	beq.n	8001e00 <TIM_TimeBaseInit+0xbc>
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <TIM_TimeBaseInit+0xfc>)
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d104      	bne.n	8001e0a <TIM_TimeBaseInit+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	7a1b      	ldrb	r3, [r3, #8]
 8001e04:	461a      	mov	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f04f 0201 	mov.w	r2, #1
 8001e10:	829a      	strh	r2, [r3, #20]
}
 8001e12:	f107 0714 	add.w	r7, r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	40012c00 	.word	0x40012c00
 8001e20:	40013400 	.word	0x40013400
 8001e24:	40000400 	.word	0x40000400
 8001e28:	40000800 	.word	0x40000800
 8001e2c:	40000c00 	.word	0x40000c00
 8001e30:	40001000 	.word	0x40001000
 8001e34:	40001400 	.word	0x40001400
 8001e38:	40014000 	.word	0x40014000
 8001e3c:	40014400 	.word	0x40014400
 8001e40:	40014800 	.word	0x40014800

08001e44 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	817b      	strh	r3, [r7, #10]
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	81fb      	strh	r3, [r7, #14]
 8001e5a:	f04f 0300 	mov.w	r3, #0
 8001e5e:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	8c1b      	ldrh	r3, [r3, #32]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	f023 0301 	bic.w	r3, r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	8c1b      	ldrh	r3, [r3, #32]
 8001e74:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	889b      	ldrh	r3, [r3, #4]
 8001e7a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	8b1b      	ldrh	r3, [r3, #24]
 8001e80:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8001e82:	897b      	ldrh	r3, [r7, #10]
 8001e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e88:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001e8a:	897b      	ldrh	r3, [r7, #10]
 8001e8c:	f023 0303 	bic.w	r3, r3, #3
 8001e90:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	881a      	ldrh	r2, [r3, #0]
 8001e96:	897b      	ldrh	r3, [r7, #10]
 8001e98:	ea42 0303 	orr.w	r3, r2, r3
 8001e9c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001e9e:	89fb      	ldrh	r3, [r7, #14]
 8001ea0:	f023 0302 	bic.w	r3, r3, #2
 8001ea4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	891a      	ldrh	r2, [r3, #8]
 8001eaa:	89fb      	ldrh	r3, [r7, #14]
 8001eac:	ea42 0303 	orr.w	r3, r2, r3
 8001eb0:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	885a      	ldrh	r2, [r3, #2]
 8001eb6:	89fb      	ldrh	r3, [r7, #14]
 8001eb8:	ea42 0303 	orr.w	r3, r2, r3
 8001ebc:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <TIM_OC1Init+0x118>)
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d00f      	beq.n	8001ee6 <TIM_OC1Init+0xa2>
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <TIM_OC1Init+0x11c>)
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d00b      	beq.n	8001ee6 <TIM_OC1Init+0xa2>
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <TIM_OC1Init+0x120>)
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d007      	beq.n	8001ee6 <TIM_OC1Init+0xa2>
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <TIM_OC1Init+0x124>)
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d003      	beq.n	8001ee6 <TIM_OC1Init+0xa2>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <TIM_OC1Init+0x128>)
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d127      	bne.n	8001f36 <TIM_OC1Init+0xf2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8001ee6:	89fb      	ldrh	r3, [r7, #14]
 8001ee8:	f023 0308 	bic.w	r3, r3, #8
 8001eec:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	895a      	ldrh	r2, [r3, #10]
 8001ef2:	89fb      	ldrh	r3, [r7, #14]
 8001ef4:	ea42 0303 	orr.w	r3, r2, r3
 8001ef8:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8001efa:	89fb      	ldrh	r3, [r7, #14]
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	889a      	ldrh	r2, [r3, #4]
 8001f06:	89fb      	ldrh	r3, [r7, #14]
 8001f08:	ea42 0303 	orr.w	r3, r2, r3
 8001f0c:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8001f0e:	89bb      	ldrh	r3, [r7, #12]
 8001f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f14:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8001f16:	89bb      	ldrh	r3, [r7, #12]
 8001f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f1c:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	899a      	ldrh	r2, [r3, #12]
 8001f22:	89bb      	ldrh	r3, [r7, #12]
 8001f24:	ea42 0303 	orr.w	r3, r2, r3
 8001f28:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	89da      	ldrh	r2, [r3, #14]
 8001f2e:	89bb      	ldrh	r3, [r7, #12]
 8001f30:	ea42 0303 	orr.w	r3, r2, r3
 8001f34:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	89ba      	ldrh	r2, [r7, #12]
 8001f3a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	897a      	ldrh	r2, [r7, #10]
 8001f40:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	88da      	ldrh	r2, [r3, #6]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	89fa      	ldrh	r2, [r7, #14]
 8001f4e:	841a      	strh	r2, [r3, #32]
}
 8001f50:	f107 0714 	add.w	r7, r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40012c00 	.word	0x40012c00
 8001f60:	40013400 	.word	0x40013400
 8001f64:	40014000 	.word	0x40014000
 8001f68:	40014400 	.word	0x40014400
 8001f6c:	40014800 	.word	0x40014800

08001f70 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d008      	beq.n	8001f94 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	801a      	strh	r2, [r3, #0]
 8001f92:	e007      	b.n	8001fa4 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	801a      	strh	r2, [r3, #0]
  }
}
 8001fa4:	f107 070c 	add.w	r7, r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop

08001fb0 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00c      	beq.n	8001fdc <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001fda:	e00b      	b.n	8001ff4 <TIM_CtrlPWMOutputs+0x44>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8001fe8:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8001ff4:	f107 070c 	add.w	r7, r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop

08002000 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	81bb      	strh	r3, [r7, #12]
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	8a1b      	ldrh	r3, [r3, #16]
 8002022:	b29a      	uxth	r2, r3
 8002024:	887b      	ldrh	r3, [r7, #2]
 8002026:	ea02 0303 	and.w	r3, r2, r3
 800202a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	899b      	ldrh	r3, [r3, #12]
 8002030:	b29a      	uxth	r2, r3
 8002032:	887b      	ldrh	r3, [r7, #2]
 8002034:	ea02 0303 	and.w	r3, r2, r3
 8002038:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800203a:	89bb      	ldrh	r3, [r7, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d006      	beq.n	800204e <TIM_GetITStatus+0x4e>
 8002040:	897b      	ldrh	r3, [r7, #10]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <TIM_GetITStatus+0x4e>
  {
    bitstatus = SET;
 8002046:	f04f 0301 	mov.w	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
 800204c:	e002      	b.n	8002054 <TIM_GetITStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002054:	7bfb      	ldrb	r3, [r7, #15]
}
 8002056:	4618      	mov	r0, r3
 8002058:	f107 0714 	add.w	r7, r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop

08002064 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8002070:	887b      	ldrh	r3, [r7, #2]
 8002072:	ea6f 0303 	mvn.w	r3, r3
 8002076:	b29a      	uxth	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	821a      	strh	r2, [r3, #16]
}
 800207c:	f107 070c 	add.w	r7, r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop

08002088 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08c      	sub	sp, #48	; 0x30
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	8a1b      	ldrh	r3, [r3, #16]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80020bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020be:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80020c2:	ea02 0303 	and.w	r3, r2, r3
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	88db      	ldrh	r3, [r3, #6]
 80020cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ce:	ea42 0303 	orr.w	r3, r2, r3
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80020d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	899b      	ldrh	r3, [r3, #12]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80020e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020e6:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80020ea:	ea02 0303 	and.w	r3, r2, r3
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	889a      	ldrh	r2, [r3, #4]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	891b      	ldrh	r3, [r3, #8]
 80020f8:	ea42 0303 	orr.w	r3, r2, r3
 80020fc:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002102:	ea42 0303 	orr.w	r3, r2, r3
 8002106:	b29b      	uxth	r3, r3
 8002108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800210a:	ea42 0303 	orr.w	r3, r2, r3
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002112:	b29a      	uxth	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	8a9b      	ldrh	r3, [r3, #20]
 800211c:	b29b      	uxth	r3, r3
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8002120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002122:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8002126:	ea02 0303 	and.w	r3, r2, r3
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	899b      	ldrh	r3, [r3, #12]
 8002130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002132:	ea42 0303 	orr.w	r3, r2, r3
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213a:	b29a      	uxth	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002140:	f107 0308 	add.w	r3, r7, #8
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fc7b 	bl	8001a40 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	4b38      	ldr	r3, [pc, #224]	; (8002230 <USART_Init+0x1a8>)
 800214e:	429a      	cmp	r2, r3
 8002150:	d102      	bne.n	8002158 <USART_Init+0xd0>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
 8002156:	e001      	b.n	800215c <USART_Init+0xd4>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	899b      	ldrh	r3, [r3, #12]
 8002160:	b29b      	uxth	r3, r3
 8002162:	b29b      	uxth	r3, r3
 8002164:	b21b      	sxth	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	da0f      	bge.n	800218a <USART_Init+0x102>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800216a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800216c:	4613      	mov	r3, r2
 800216e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002172:	189b      	adds	r3, r3, r2
 8002174:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002178:	189a      	adds	r2, r3, r2
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002182:	fbb2 f3f3 	udiv	r3, r2, r3
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
 8002188:	e00e      	b.n	80021a8 <USART_Init+0x120>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800218a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800218c:	4613      	mov	r3, r2
 800218e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002192:	189b      	adds	r3, r3, r2
 8002194:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002198:	189a      	adds	r2, r3, r2
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80021a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021aa:	4b22      	ldr	r3, [pc, #136]	; (8002234 <USART_Init+0x1ac>)
 80021ac:	fba3 1302 	umull	r1, r3, r3, r2
 80021b0:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80021b4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80021ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021bc:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80021c0:	f04f 0264 	mov.w	r2, #100	; 0x64
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	899b      	ldrh	r3, [r3, #12]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	da10      	bge.n	80021fe <USART_Init+0x176>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80021e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80021e6:	4b13      	ldr	r3, [pc, #76]	; (8002234 <USART_Init+0x1ac>)
 80021e8:	fba3 1302 	umull	r1, r3, r3, r2
 80021ec:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021f6:	ea42 0303 	orr.w	r3, r2, r3
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021fc:	e00f      	b.n	800221e <USART_Init+0x196>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002204:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002208:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <USART_Init+0x1ac>)
 800220a:	fba3 1302 	umull	r1, r3, r3, r2
 800220e:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002218:	ea42 0303 	orr.w	r3, r2, r3
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 800221e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002220:	b29a      	uxth	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	811a      	strh	r2, [r3, #8]
}
 8002226:	f107 0730 	add.w	r7, r7, #48	; 0x30
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40013800 	.word	0x40013800
 8002234:	51eb851f 	.word	0x51eb851f

08002238 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d008      	beq.n	800225c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	899b      	ldrh	r3, [r3, #12]
 800224e:	b29b      	uxth	r3, r3
 8002250:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002254:	b29a      	uxth	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	819a      	strh	r2, [r3, #12]
 800225a:	e007      	b.n	800226c <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	899b      	ldrh	r3, [r3, #12]
 8002260:	b29b      	uxth	r3, r3
 8002262:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002266:	b29a      	uxth	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	819a      	strh	r2, [r3, #12]
  }
}
 800226c:	f107 070c 	add.w	r7, r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop

08002278 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	460a      	mov	r2, r1
 8002284:	807a      	strh	r2, [r7, #2]
 8002286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 8002288:	787b      	ldrb	r3, [r7, #1]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d009      	beq.n	80022a2 <USART_DMACmd+0x2a>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	8a9b      	ldrh	r3, [r3, #20]
 8002292:	b29a      	uxth	r2, r3
 8002294:	887b      	ldrh	r3, [r7, #2]
 8002296:	ea42 0303 	orr.w	r3, r2, r3
 800229a:	b29a      	uxth	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	829a      	strh	r2, [r3, #20]
 80022a0:	e00b      	b.n	80022ba <USART_DMACmd+0x42>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	8a9b      	ldrh	r3, [r3, #20]
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	887b      	ldrh	r3, [r7, #2]
 80022aa:	ea6f 0303 	mvn.w	r3, r3
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	ea02 0303 	and.w	r3, r2, r3
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	829a      	strh	r2, [r3, #20]
  }
}
 80022ba:	f107 070c 	add.w	r7, r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80022e8:	887b      	ldrh	r3, [r7, #2]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 80022f4:	887b      	ldrh	r3, [r7, #2]
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f04f 0201 	mov.w	r2, #1
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d107      	bne.n	800231e <USART_GetITStatus+0x5a>
  {
    itmask &= USARTx->CR1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	899b      	ldrh	r3, [r3, #12]
 8002312:	b29b      	uxth	r3, r3
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	ea02 0303 	and.w	r3, r2, r3
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	e011      	b.n	8002342 <USART_GetITStatus+0x7e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d107      	bne.n	8002334 <USART_GetITStatus+0x70>
  {
    itmask &= USARTx->CR2;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	8a1b      	ldrh	r3, [r3, #16]
 8002328:	b29b      	uxth	r3, r3
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	ea02 0303 	and.w	r3, r2, r3
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	e006      	b.n	8002342 <USART_GetITStatus+0x7e>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	8a9b      	ldrh	r3, [r3, #20]
 8002338:	b29b      	uxth	r3, r3
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	ea02 0303 	and.w	r3, r2, r3
 8002340:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8002348:	b29b      	uxth	r3, r3
 800234a:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f04f 0201 	mov.w	r2, #1
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	ea02 0303 	and.w	r3, r2, r3
 8002364:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <USART_GetITStatus+0xb6>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <USART_GetITStatus+0xb6>
  {
    bitstatus = SET;
 8002372:	f04f 0301 	mov.w	r3, #1
 8002376:	74fb      	strb	r3, [r7, #19]
 8002378:	e002      	b.n	8002380 <USART_GetITStatus+0xbc>
  }
  else
  {
    bitstatus = RESET;
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8002380:	7cfb      	ldrb	r3, [r7, #19]
}
 8002382:	4618      	mov	r0, r3
 8002384:	f107 071c 	add.w	r7, r7, #28
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop

08002390 <sqrt>:
 8002390:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8002394:	b08a      	sub	sp, #40	; 0x28
 8002396:	4604      	mov	r4, r0
 8002398:	460d      	mov	r5, r1
 800239a:	f000 f84f 	bl	800243c <__ieee754_sqrt>
 800239e:	f240 0618 	movw	r6, #24
 80023a2:	f2c2 0600 	movt	r6, #8192	; 0x2000
 80023a6:	f996 3000 	ldrsb.w	r3, [r6]
 80023aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ae:	4680      	mov	r8, r0
 80023b0:	4689      	mov	r9, r1
 80023b2:	d031      	beq.n	8002418 <sqrt+0x88>
 80023b4:	4620      	mov	r0, r4
 80023b6:	4629      	mov	r1, r5
 80023b8:	f000 f920 	bl	80025fc <__fpclassifyd>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d02b      	beq.n	8002418 <sqrt+0x88>
 80023c0:	f04f 0a00 	mov.w	sl, #0
 80023c4:	f04f 0b00 	mov.w	fp, #0
 80023c8:	4620      	mov	r0, r4
 80023ca:	4629      	mov	r1, r5
 80023cc:	4652      	mov	r2, sl
 80023ce:	465b      	mov	r3, fp
 80023d0:	f000 fd88 	bl	8002ee4 <__aeabi_dcmplt>
 80023d4:	b300      	cbz	r0, 8002418 <sqrt+0x88>
 80023d6:	7836      	ldrb	r6, [r6, #0]
 80023d8:	f243 7308 	movw	r3, #14088	; 0x3708
 80023dc:	f6c0 0300 	movt	r3, #2048	; 0x800
 80023e0:	2201      	movs	r2, #1
 80023e2:	9301      	str	r3, [sp, #4]
 80023e4:	2300      	movs	r3, #0
 80023e6:	9200      	str	r2, [sp, #0]
 80023e8:	9308      	str	r3, [sp, #32]
 80023ea:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80023ee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80023f2:	b1b6      	cbz	r6, 8002422 <sqrt+0x92>
 80023f4:	4650      	mov	r0, sl
 80023f6:	4659      	mov	r1, fp
 80023f8:	4652      	mov	r2, sl
 80023fa:	465b      	mov	r3, fp
 80023fc:	f000 fc2a 	bl	8002c54 <__aeabi_ddiv>
 8002400:	2e02      	cmp	r6, #2
 8002402:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002406:	d10e      	bne.n	8002426 <sqrt+0x96>
 8002408:	f001 f8d8 	bl	80035bc <__errno>
 800240c:	2321      	movs	r3, #33	; 0x21
 800240e:	6003      	str	r3, [r0, #0]
 8002410:	9b08      	ldr	r3, [sp, #32]
 8002412:	b973      	cbnz	r3, 8002432 <sqrt+0xa2>
 8002414:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8002418:	4640      	mov	r0, r8
 800241a:	4649      	mov	r1, r9
 800241c:	b00a      	add	sp, #40	; 0x28
 800241e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8002422:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8002426:	4668      	mov	r0, sp
 8002428:	f000 f930 	bl	800268c <matherr>
 800242c:	2800      	cmp	r0, #0
 800242e:	d1ef      	bne.n	8002410 <sqrt+0x80>
 8002430:	e7ea      	b.n	8002408 <sqrt+0x78>
 8002432:	f001 f8c3 	bl	80035bc <__errno>
 8002436:	9b08      	ldr	r3, [sp, #32]
 8002438:	6003      	str	r3, [r0, #0]
 800243a:	e7eb      	b.n	8002414 <sqrt+0x84>

0800243c <__ieee754_sqrt>:
 800243c:	f04f 0c00 	mov.w	ip, #0
 8002440:	4602      	mov	r2, r0
 8002442:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002446:	46e0      	mov	r8, ip
 8002448:	f6c7 7cf0 	movt	ip, #32752	; 0x7ff0
 800244c:	f6c7 78f0 	movt	r8, #32752	; 0x7ff0
 8002450:	ea01 0c0c 	and.w	ip, r1, ip
 8002454:	4604      	mov	r4, r0
 8002456:	45c4      	cmp	ip, r8
 8002458:	460d      	mov	r5, r1
 800245a:	460b      	mov	r3, r1
 800245c:	460e      	mov	r6, r1
 800245e:	4607      	mov	r7, r0
 8002460:	f000 80b0 	beq.w	80025c4 <__ieee754_sqrt+0x188>
 8002464:	2900      	cmp	r1, #0
 8002466:	f340 80a0 	ble.w	80025aa <__ieee754_sqrt+0x16e>
 800246a:	150a      	asrs	r2, r1, #20
 800246c:	d07e      	beq.n	800256c <__ieee754_sqrt+0x130>
 800246e:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
 8002472:	f012 0f01 	tst.w	r2, #1
 8002476:	f5a2 7c7e 	sub.w	ip, r2, #1016	; 0x3f8
 800247a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800247e:	f1ac 0c07 	sub.w	ip, ip, #7
 8002482:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002486:	d062      	beq.n	800254e <__ieee754_sqrt+0x112>
 8002488:	0ffa      	lsrs	r2, r7, #31
 800248a:	2600      	movs	r6, #0
 800248c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002490:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 8002494:	007f      	lsls	r7, r7, #1
 8002496:	2016      	movs	r0, #22
 8002498:	4631      	mov	r1, r6
 800249a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800249e:	188c      	adds	r4, r1, r2
 80024a0:	0ffd      	lsrs	r5, r7, #31
 80024a2:	429c      	cmp	r4, r3
 80024a4:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80024a8:	bfde      	ittt	le
 80024aa:	ebc4 0303 	rsble	r3, r4, r3
 80024ae:	18a1      	addle	r1, r4, r2
 80024b0:	18b6      	addle	r6, r6, r2
 80024b2:	0852      	lsrs	r2, r2, #1
 80024b4:	3801      	subs	r0, #1
 80024b6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80024ba:	d1f0      	bne.n	800249e <__ieee754_sqrt+0x62>
 80024bc:	2520      	movs	r5, #32
 80024be:	4680      	mov	r8, r0
 80024c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80024c4:	4299      	cmp	r1, r3
 80024c6:	eb02 0408 	add.w	r4, r2, r8
 80024ca:	db0e      	blt.n	80024ea <__ieee754_sqrt+0xae>
 80024cc:	428b      	cmp	r3, r1
 80024ce:	bf14      	ite	ne
 80024d0:	f04f 0900 	movne.w	r9, #0
 80024d4:	f04f 0901 	moveq.w	r9, #1
 80024d8:	42bc      	cmp	r4, r7
 80024da:	bf8c      	ite	hi
 80024dc:	f04f 0900 	movhi.w	r9, #0
 80024e0:	f009 0901 	andls.w	r9, r9, #1
 80024e4:	f1b9 0f00 	cmp.w	r9, #0
 80024e8:	d00e      	beq.n	8002508 <__ieee754_sqrt+0xcc>
 80024ea:	f004 4900 	and.w	r9, r4, #2147483648	; 0x80000000
 80024ee:	eb04 0802 	add.w	r8, r4, r2
 80024f2:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 80024f6:	d023      	beq.n	8002540 <__ieee754_sqrt+0x104>
 80024f8:	4689      	mov	r9, r1
 80024fa:	1a5b      	subs	r3, r3, r1
 80024fc:	42bc      	cmp	r4, r7
 80024fe:	bf88      	it	hi
 8002500:	3b01      	subhi	r3, #1
 8002502:	1b3f      	subs	r7, r7, r4
 8002504:	1880      	adds	r0, r0, r2
 8002506:	4649      	mov	r1, r9
 8002508:	0ffc      	lsrs	r4, r7, #31
 800250a:	0852      	lsrs	r2, r2, #1
 800250c:	007f      	lsls	r7, r7, #1
 800250e:	3d01      	subs	r5, #1
 8002510:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002514:	d1d6      	bne.n	80024c4 <__ieee754_sqrt+0x88>
 8002516:	433b      	orrs	r3, r7
 8002518:	d11e      	bne.n	8002558 <__ieee754_sqrt+0x11c>
 800251a:	0840      	lsrs	r0, r0, #1
 800251c:	ea4f 520c 	mov.w	r2, ip, lsl #20
 8002520:	1073      	asrs	r3, r6, #1
 8002522:	f102 527e 	add.w	r2, r2, #1065353216	; 0x3f800000
 8002526:	f016 0f01 	tst.w	r6, #1
 800252a:	bf18      	it	ne
 800252c:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
 8002530:	f502 02c0 	add.w	r2, r2, #6291456	; 0x600000
 8002534:	18d5      	adds	r5, r2, r3
 8002536:	4604      	mov	r4, r0
 8002538:	4620      	mov	r0, r4
 800253a:	4629      	mov	r1, r5
 800253c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002540:	f1b8 0f00 	cmp.w	r8, #0
 8002544:	bfa8      	it	ge
 8002546:	f101 0901 	addge.w	r9, r1, #1
 800254a:	dad6      	bge.n	80024fa <__ieee754_sqrt+0xbe>
 800254c:	e7d4      	b.n	80024f8 <__ieee754_sqrt+0xbc>
 800254e:	0ffa      	lsrs	r2, r7, #31
 8002550:	007f      	lsls	r7, r7, #1
 8002552:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002556:	e797      	b.n	8002488 <__ieee754_sqrt+0x4c>
 8002558:	f1b0 3fff 	cmp.w	r0, #4294967295
 800255c:	bf1c      	itt	ne
 800255e:	f000 0301 	andne.w	r3, r0, #1
 8002562:	1818      	addne	r0, r3, r0
 8002564:	d1d9      	bne.n	800251a <__ieee754_sqrt+0xde>
 8002566:	3601      	adds	r6, #1
 8002568:	4628      	mov	r0, r5
 800256a:	e7d7      	b.n	800251c <__ieee754_sqrt+0xe0>
 800256c:	2201      	movs	r2, #1
 800256e:	f416 1380 	ands.w	r3, r6, #1048576	; 0x100000
 8002572:	d135      	bne.n	80025e0 <__ieee754_sqrt+0x1a4>
 8002574:	0076      	lsls	r6, r6, #1
 8002576:	3301      	adds	r3, #1
 8002578:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 800257c:	d0fa      	beq.n	8002574 <__ieee754_sqrt+0x138>
 800257e:	f1c3 0120 	rsb	r1, r3, #32
 8002582:	fa37 f101 	lsrs.w	r1, r7, r1
 8002586:	1ad2      	subs	r2, r2, r3
 8002588:	430e      	orrs	r6, r1
 800258a:	409f      	lsls	r7, r3
 800258c:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
 8002590:	f012 0f01 	tst.w	r2, #1
 8002594:	f5a2 7c7e 	sub.w	ip, r2, #1016	; 0x3f8
 8002598:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800259c:	f1ac 0c07 	sub.w	ip, ip, #7
 80025a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025a4:	f47f af70 	bne.w	8002488 <__ieee754_sqrt+0x4c>
 80025a8:	e7d1      	b.n	800254e <__ieee754_sqrt+0x112>
 80025aa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80025ae:	ea5c 0c00 	orrs.w	ip, ip, r0
 80025b2:	d0c1      	beq.n	8002538 <__ieee754_sqrt+0xfc>
 80025b4:	b9b9      	cbnz	r1, 80025e6 <__ieee754_sqrt+0x1aa>
 80025b6:	0afe      	lsrs	r6, r7, #11
 80025b8:	3b15      	subs	r3, #21
 80025ba:	057f      	lsls	r7, r7, #21
 80025bc:	2e00      	cmp	r6, #0
 80025be:	d0fa      	beq.n	80025b6 <__ieee754_sqrt+0x17a>
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	e7d4      	b.n	800256e <__ieee754_sqrt+0x132>
 80025c4:	f000 fa1c 	bl	8002a00 <__aeabi_dmul>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4620      	mov	r0, r4
 80025ce:	4629      	mov	r1, r5
 80025d0:	f000 f864 	bl	800269c <__adddf3>
 80025d4:	4604      	mov	r4, r0
 80025d6:	460d      	mov	r5, r1
 80025d8:	4620      	mov	r0, r4
 80025da:	4629      	mov	r1, r5
 80025dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025e0:	2120      	movs	r1, #32
 80025e2:	2300      	movs	r3, #0
 80025e4:	e7cd      	b.n	8002582 <__ieee754_sqrt+0x146>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	f000 f855 	bl	8002698 <__aeabi_dsub>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	f000 fb2f 	bl	8002c54 <__aeabi_ddiv>
 80025f6:	4604      	mov	r4, r0
 80025f8:	460d      	mov	r5, r1
 80025fa:	e79d      	b.n	8002538 <__ieee754_sqrt+0xfc>

080025fc <__fpclassifyd>:
 80025fc:	ea50 0301 	orrs.w	r3, r0, r1
 8002600:	b410      	push	{r4}
 8002602:	d03c      	beq.n	800267e <__fpclassifyd+0x82>
 8002604:	f1d0 0201 	rsbs	r2, r0, #1
 8002608:	bf38      	it	cc
 800260a:	2200      	movcc	r2, #0
 800260c:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8002610:	bf14      	ite	ne
 8002612:	2300      	movne	r3, #0
 8002614:	f002 0301 	andeq.w	r3, r2, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d130      	bne.n	800267e <__fpclassifyd+0x82>
 800261c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002620:	f5a1 1080 	sub.w	r0, r1, #1048576	; 0x100000
 8002624:	f6c7 73df 	movt	r3, #32735	; 0x7fdf
 8002628:	f101 44fe 	add.w	r4, r1, #2130706432	; 0x7f000000
 800262c:	4298      	cmp	r0, r3
 800262e:	f504 0470 	add.w	r4, r4, #15728640	; 0xf00000
 8002632:	bf8c      	ite	hi
 8002634:	2000      	movhi	r0, #0
 8002636:	2001      	movls	r0, #1
 8002638:	429c      	cmp	r4, r3
 800263a:	bf8c      	ite	hi
 800263c:	4603      	movhi	r3, r0
 800263e:	f040 0301 	orrls.w	r3, r0, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d120      	bne.n	8002688 <__fpclassifyd+0x8c>
 8002646:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800264a:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 800264e:	bf2c      	ite	cs
 8002650:	2300      	movcs	r3, #0
 8002652:	2301      	movcc	r3, #1
 8002654:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8002658:	bf38      	it	cc
 800265a:	f043 0301 	orrcc.w	r3, r3, #1
 800265e:	b98b      	cbnz	r3, 8002684 <__fpclassifyd+0x88>
 8002660:	f511 1f80 	cmn.w	r1, #1048576	; 0x100000
 8002664:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8002668:	bf14      	ite	ne
 800266a:	2000      	movne	r0, #0
 800266c:	2001      	moveq	r0, #1
 800266e:	4299      	cmp	r1, r3
 8002670:	bf14      	ite	ne
 8002672:	4601      	movne	r1, r0
 8002674:	f040 0101 	orreq.w	r1, r0, #1
 8002678:	ea02 0001 	and.w	r0, r2, r1
 800267c:	e000      	b.n	8002680 <__fpclassifyd+0x84>
 800267e:	2002      	movs	r0, #2
 8002680:	bc10      	pop	{r4}
 8002682:	4770      	bx	lr
 8002684:	2003      	movs	r0, #3
 8002686:	e7fb      	b.n	8002680 <__fpclassifyd+0x84>
 8002688:	2004      	movs	r0, #4
 800268a:	e7f9      	b.n	8002680 <__fpclassifyd+0x84>

0800268c <matherr>:
 800268c:	2000      	movs	r0, #0
 800268e:	4770      	bx	lr

08002690 <__aeabi_drsub>:
 8002690:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8002694:	e002      	b.n	800269c <__adddf3>
 8002696:	bf00      	nop

08002698 <__aeabi_dsub>:
 8002698:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800269c <__adddf3>:
 800269c:	b530      	push	{r4, r5, lr}
 800269e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80026a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80026a6:	ea94 0f05 	teq	r4, r5
 80026aa:	bf08      	it	eq
 80026ac:	ea90 0f02 	teqeq	r0, r2
 80026b0:	bf1f      	itttt	ne
 80026b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80026b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80026ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80026be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80026c2:	f000 80e2 	beq.w	800288a <__adddf3+0x1ee>
 80026c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80026ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80026ce:	bfb8      	it	lt
 80026d0:	426d      	neglt	r5, r5
 80026d2:	dd0c      	ble.n	80026ee <__adddf3+0x52>
 80026d4:	442c      	add	r4, r5
 80026d6:	ea80 0202 	eor.w	r2, r0, r2
 80026da:	ea81 0303 	eor.w	r3, r1, r3
 80026de:	ea82 0000 	eor.w	r0, r2, r0
 80026e2:	ea83 0101 	eor.w	r1, r3, r1
 80026e6:	ea80 0202 	eor.w	r2, r0, r2
 80026ea:	ea81 0303 	eor.w	r3, r1, r3
 80026ee:	2d36      	cmp	r5, #54	; 0x36
 80026f0:	bf88      	it	hi
 80026f2:	bd30      	pophi	{r4, r5, pc}
 80026f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80026f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80026fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8002700:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002704:	d002      	beq.n	800270c <__adddf3+0x70>
 8002706:	4240      	negs	r0, r0
 8002708:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800270c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8002710:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002714:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002718:	d002      	beq.n	8002720 <__adddf3+0x84>
 800271a:	4252      	negs	r2, r2
 800271c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002720:	ea94 0f05 	teq	r4, r5
 8002724:	f000 80a7 	beq.w	8002876 <__adddf3+0x1da>
 8002728:	f1a4 0401 	sub.w	r4, r4, #1
 800272c:	f1d5 0e20 	rsbs	lr, r5, #32
 8002730:	db0d      	blt.n	800274e <__adddf3+0xb2>
 8002732:	fa02 fc0e 	lsl.w	ip, r2, lr
 8002736:	fa22 f205 	lsr.w	r2, r2, r5
 800273a:	1880      	adds	r0, r0, r2
 800273c:	f141 0100 	adc.w	r1, r1, #0
 8002740:	fa03 f20e 	lsl.w	r2, r3, lr
 8002744:	1880      	adds	r0, r0, r2
 8002746:	fa43 f305 	asr.w	r3, r3, r5
 800274a:	4159      	adcs	r1, r3
 800274c:	e00e      	b.n	800276c <__adddf3+0xd0>
 800274e:	f1a5 0520 	sub.w	r5, r5, #32
 8002752:	f10e 0e20 	add.w	lr, lr, #32
 8002756:	2a01      	cmp	r2, #1
 8002758:	fa03 fc0e 	lsl.w	ip, r3, lr
 800275c:	bf28      	it	cs
 800275e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8002762:	fa43 f305 	asr.w	r3, r3, r5
 8002766:	18c0      	adds	r0, r0, r3
 8002768:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800276c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002770:	d507      	bpl.n	8002782 <__adddf3+0xe6>
 8002772:	f04f 0e00 	mov.w	lr, #0
 8002776:	f1dc 0c00 	rsbs	ip, ip, #0
 800277a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800277e:	eb6e 0101 	sbc.w	r1, lr, r1
 8002782:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002786:	d31b      	bcc.n	80027c0 <__adddf3+0x124>
 8002788:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800278c:	d30c      	bcc.n	80027a8 <__adddf3+0x10c>
 800278e:	0849      	lsrs	r1, r1, #1
 8002790:	ea5f 0030 	movs.w	r0, r0, rrx
 8002794:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8002798:	f104 0401 	add.w	r4, r4, #1
 800279c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80027a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80027a4:	f080 809a 	bcs.w	80028dc <__adddf3+0x240>
 80027a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80027ac:	bf08      	it	eq
 80027ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80027b2:	f150 0000 	adcs.w	r0, r0, #0
 80027b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80027ba:	ea41 0105 	orr.w	r1, r1, r5
 80027be:	bd30      	pop	{r4, r5, pc}
 80027c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80027c4:	4140      	adcs	r0, r0
 80027c6:	eb41 0101 	adc.w	r1, r1, r1
 80027ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80027ce:	f1a4 0401 	sub.w	r4, r4, #1
 80027d2:	d1e9      	bne.n	80027a8 <__adddf3+0x10c>
 80027d4:	f091 0f00 	teq	r1, #0
 80027d8:	bf04      	itt	eq
 80027da:	4601      	moveq	r1, r0
 80027dc:	2000      	moveq	r0, #0
 80027de:	fab1 f381 	clz	r3, r1
 80027e2:	bf08      	it	eq
 80027e4:	3320      	addeq	r3, #32
 80027e6:	f1a3 030b 	sub.w	r3, r3, #11
 80027ea:	f1b3 0220 	subs.w	r2, r3, #32
 80027ee:	da0c      	bge.n	800280a <__adddf3+0x16e>
 80027f0:	320c      	adds	r2, #12
 80027f2:	dd08      	ble.n	8002806 <__adddf3+0x16a>
 80027f4:	f102 0c14 	add.w	ip, r2, #20
 80027f8:	f1c2 020c 	rsb	r2, r2, #12
 80027fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8002800:	fa21 f102 	lsr.w	r1, r1, r2
 8002804:	e00c      	b.n	8002820 <__adddf3+0x184>
 8002806:	f102 0214 	add.w	r2, r2, #20
 800280a:	bfd8      	it	le
 800280c:	f1c2 0c20 	rsble	ip, r2, #32
 8002810:	fa01 f102 	lsl.w	r1, r1, r2
 8002814:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002818:	bfdc      	itt	le
 800281a:	ea41 010c 	orrle.w	r1, r1, ip
 800281e:	4090      	lslle	r0, r2
 8002820:	1ae4      	subs	r4, r4, r3
 8002822:	bfa2      	ittt	ge
 8002824:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002828:	4329      	orrge	r1, r5
 800282a:	bd30      	popge	{r4, r5, pc}
 800282c:	ea6f 0404 	mvn.w	r4, r4
 8002830:	3c1f      	subs	r4, #31
 8002832:	da1c      	bge.n	800286e <__adddf3+0x1d2>
 8002834:	340c      	adds	r4, #12
 8002836:	dc0e      	bgt.n	8002856 <__adddf3+0x1ba>
 8002838:	f104 0414 	add.w	r4, r4, #20
 800283c:	f1c4 0220 	rsb	r2, r4, #32
 8002840:	fa20 f004 	lsr.w	r0, r0, r4
 8002844:	fa01 f302 	lsl.w	r3, r1, r2
 8002848:	ea40 0003 	orr.w	r0, r0, r3
 800284c:	fa21 f304 	lsr.w	r3, r1, r4
 8002850:	ea45 0103 	orr.w	r1, r5, r3
 8002854:	bd30      	pop	{r4, r5, pc}
 8002856:	f1c4 040c 	rsb	r4, r4, #12
 800285a:	f1c4 0220 	rsb	r2, r4, #32
 800285e:	fa20 f002 	lsr.w	r0, r0, r2
 8002862:	fa01 f304 	lsl.w	r3, r1, r4
 8002866:	ea40 0003 	orr.w	r0, r0, r3
 800286a:	4629      	mov	r1, r5
 800286c:	bd30      	pop	{r4, r5, pc}
 800286e:	fa21 f004 	lsr.w	r0, r1, r4
 8002872:	4629      	mov	r1, r5
 8002874:	bd30      	pop	{r4, r5, pc}
 8002876:	f094 0f00 	teq	r4, #0
 800287a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800287e:	bf06      	itte	eq
 8002880:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8002884:	3401      	addeq	r4, #1
 8002886:	3d01      	subne	r5, #1
 8002888:	e74e      	b.n	8002728 <__adddf3+0x8c>
 800288a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800288e:	bf18      	it	ne
 8002890:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002894:	d029      	beq.n	80028ea <__adddf3+0x24e>
 8002896:	ea94 0f05 	teq	r4, r5
 800289a:	bf08      	it	eq
 800289c:	ea90 0f02 	teqeq	r0, r2
 80028a0:	d005      	beq.n	80028ae <__adddf3+0x212>
 80028a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80028a6:	bf04      	itt	eq
 80028a8:	4619      	moveq	r1, r3
 80028aa:	4610      	moveq	r0, r2
 80028ac:	bd30      	pop	{r4, r5, pc}
 80028ae:	ea91 0f03 	teq	r1, r3
 80028b2:	bf1e      	ittt	ne
 80028b4:	2100      	movne	r1, #0
 80028b6:	2000      	movne	r0, #0
 80028b8:	bd30      	popne	{r4, r5, pc}
 80028ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80028be:	d105      	bne.n	80028cc <__adddf3+0x230>
 80028c0:	0040      	lsls	r0, r0, #1
 80028c2:	4149      	adcs	r1, r1
 80028c4:	bf28      	it	cs
 80028c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80028ca:	bd30      	pop	{r4, r5, pc}
 80028cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80028d0:	bf3c      	itt	cc
 80028d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80028d6:	bd30      	popcc	{r4, r5, pc}
 80028d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80028dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80028e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80028e4:	f04f 0000 	mov.w	r0, #0
 80028e8:	bd30      	pop	{r4, r5, pc}
 80028ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80028ee:	bf1a      	itte	ne
 80028f0:	4619      	movne	r1, r3
 80028f2:	4610      	movne	r0, r2
 80028f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80028f8:	bf1c      	itt	ne
 80028fa:	460b      	movne	r3, r1
 80028fc:	4602      	movne	r2, r0
 80028fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002902:	bf06      	itte	eq
 8002904:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002908:	ea91 0f03 	teqeq	r1, r3
 800290c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8002910:	bd30      	pop	{r4, r5, pc}
 8002912:	bf00      	nop

08002914 <__aeabi_ui2d>:
 8002914:	f090 0f00 	teq	r0, #0
 8002918:	bf04      	itt	eq
 800291a:	2100      	moveq	r1, #0
 800291c:	4770      	bxeq	lr
 800291e:	b530      	push	{r4, r5, lr}
 8002920:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002924:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002928:	f04f 0500 	mov.w	r5, #0
 800292c:	f04f 0100 	mov.w	r1, #0
 8002930:	e750      	b.n	80027d4 <__adddf3+0x138>
 8002932:	bf00      	nop

08002934 <__aeabi_i2d>:
 8002934:	f090 0f00 	teq	r0, #0
 8002938:	bf04      	itt	eq
 800293a:	2100      	moveq	r1, #0
 800293c:	4770      	bxeq	lr
 800293e:	b530      	push	{r4, r5, lr}
 8002940:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002944:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002948:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800294c:	bf48      	it	mi
 800294e:	4240      	negmi	r0, r0
 8002950:	f04f 0100 	mov.w	r1, #0
 8002954:	e73e      	b.n	80027d4 <__adddf3+0x138>
 8002956:	bf00      	nop

08002958 <__aeabi_f2d>:
 8002958:	0042      	lsls	r2, r0, #1
 800295a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800295e:	ea4f 0131 	mov.w	r1, r1, rrx
 8002962:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8002966:	bf1f      	itttt	ne
 8002968:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800296c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002970:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8002974:	4770      	bxne	lr
 8002976:	f092 0f00 	teq	r2, #0
 800297a:	bf14      	ite	ne
 800297c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002980:	4770      	bxeq	lr
 8002982:	b530      	push	{r4, r5, lr}
 8002984:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002988:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800298c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002990:	e720      	b.n	80027d4 <__adddf3+0x138>
 8002992:	bf00      	nop

08002994 <__aeabi_ul2d>:
 8002994:	ea50 0201 	orrs.w	r2, r0, r1
 8002998:	bf08      	it	eq
 800299a:	4770      	bxeq	lr
 800299c:	b530      	push	{r4, r5, lr}
 800299e:	f04f 0500 	mov.w	r5, #0
 80029a2:	e00a      	b.n	80029ba <__aeabi_l2d+0x16>

080029a4 <__aeabi_l2d>:
 80029a4:	ea50 0201 	orrs.w	r2, r0, r1
 80029a8:	bf08      	it	eq
 80029aa:	4770      	bxeq	lr
 80029ac:	b530      	push	{r4, r5, lr}
 80029ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80029b2:	d502      	bpl.n	80029ba <__aeabi_l2d+0x16>
 80029b4:	4240      	negs	r0, r0
 80029b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80029ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80029be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80029c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80029c6:	f43f aedc 	beq.w	8002782 <__adddf3+0xe6>
 80029ca:	f04f 0203 	mov.w	r2, #3
 80029ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80029d2:	bf18      	it	ne
 80029d4:	3203      	addne	r2, #3
 80029d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80029da:	bf18      	it	ne
 80029dc:	3203      	addne	r2, #3
 80029de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80029e2:	f1c2 0320 	rsb	r3, r2, #32
 80029e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80029ea:	fa20 f002 	lsr.w	r0, r0, r2
 80029ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80029f2:	ea40 000e 	orr.w	r0, r0, lr
 80029f6:	fa21 f102 	lsr.w	r1, r1, r2
 80029fa:	4414      	add	r4, r2
 80029fc:	e6c1      	b.n	8002782 <__adddf3+0xe6>
 80029fe:	bf00      	nop

08002a00 <__aeabi_dmul>:
 8002a00:	b570      	push	{r4, r5, r6, lr}
 8002a02:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002a06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002a0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002a0e:	bf1d      	ittte	ne
 8002a10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002a14:	ea94 0f0c 	teqne	r4, ip
 8002a18:	ea95 0f0c 	teqne	r5, ip
 8002a1c:	f000 f8de 	bleq	8002bdc <__aeabi_dmul+0x1dc>
 8002a20:	442c      	add	r4, r5
 8002a22:	ea81 0603 	eor.w	r6, r1, r3
 8002a26:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002a2a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8002a2e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8002a32:	bf18      	it	ne
 8002a34:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002a38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002a3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a40:	d038      	beq.n	8002ab4 <__aeabi_dmul+0xb4>
 8002a42:	fba0 ce02 	umull	ip, lr, r0, r2
 8002a46:	f04f 0500 	mov.w	r5, #0
 8002a4a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8002a4e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8002a52:	fbe0 e503 	umlal	lr, r5, r0, r3
 8002a56:	f04f 0600 	mov.w	r6, #0
 8002a5a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8002a5e:	f09c 0f00 	teq	ip, #0
 8002a62:	bf18      	it	ne
 8002a64:	f04e 0e01 	orrne.w	lr, lr, #1
 8002a68:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8002a6c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8002a70:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8002a74:	d204      	bcs.n	8002a80 <__aeabi_dmul+0x80>
 8002a76:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8002a7a:	416d      	adcs	r5, r5
 8002a7c:	eb46 0606 	adc.w	r6, r6, r6
 8002a80:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8002a84:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002a88:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002a8c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8002a90:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8002a94:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002a98:	bf88      	it	hi
 8002a9a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002a9e:	d81e      	bhi.n	8002ade <__aeabi_dmul+0xde>
 8002aa0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8002aa4:	bf08      	it	eq
 8002aa6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8002aaa:	f150 0000 	adcs.w	r0, r0, #0
 8002aae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002ab2:	bd70      	pop	{r4, r5, r6, pc}
 8002ab4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8002ab8:	ea46 0101 	orr.w	r1, r6, r1
 8002abc:	ea40 0002 	orr.w	r0, r0, r2
 8002ac0:	ea81 0103 	eor.w	r1, r1, r3
 8002ac4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8002ac8:	bfc2      	ittt	gt
 8002aca:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002ace:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002ad2:	bd70      	popgt	{r4, r5, r6, pc}
 8002ad4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002ad8:	f04f 0e00 	mov.w	lr, #0
 8002adc:	3c01      	subs	r4, #1
 8002ade:	f300 80ab 	bgt.w	8002c38 <__aeabi_dmul+0x238>
 8002ae2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8002ae6:	bfde      	ittt	le
 8002ae8:	2000      	movle	r0, #0
 8002aea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8002aee:	bd70      	pople	{r4, r5, r6, pc}
 8002af0:	f1c4 0400 	rsb	r4, r4, #0
 8002af4:	3c20      	subs	r4, #32
 8002af6:	da35      	bge.n	8002b64 <__aeabi_dmul+0x164>
 8002af8:	340c      	adds	r4, #12
 8002afa:	dc1b      	bgt.n	8002b34 <__aeabi_dmul+0x134>
 8002afc:	f104 0414 	add.w	r4, r4, #20
 8002b00:	f1c4 0520 	rsb	r5, r4, #32
 8002b04:	fa00 f305 	lsl.w	r3, r0, r5
 8002b08:	fa20 f004 	lsr.w	r0, r0, r4
 8002b0c:	fa01 f205 	lsl.w	r2, r1, r5
 8002b10:	ea40 0002 	orr.w	r0, r0, r2
 8002b14:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8002b18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002b1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002b20:	fa21 f604 	lsr.w	r6, r1, r4
 8002b24:	eb42 0106 	adc.w	r1, r2, r6
 8002b28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002b2c:	bf08      	it	eq
 8002b2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002b32:	bd70      	pop	{r4, r5, r6, pc}
 8002b34:	f1c4 040c 	rsb	r4, r4, #12
 8002b38:	f1c4 0520 	rsb	r5, r4, #32
 8002b3c:	fa00 f304 	lsl.w	r3, r0, r4
 8002b40:	fa20 f005 	lsr.w	r0, r0, r5
 8002b44:	fa01 f204 	lsl.w	r2, r1, r4
 8002b48:	ea40 0002 	orr.w	r0, r0, r2
 8002b4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002b50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002b54:	f141 0100 	adc.w	r1, r1, #0
 8002b58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002b5c:	bf08      	it	eq
 8002b5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002b62:	bd70      	pop	{r4, r5, r6, pc}
 8002b64:	f1c4 0520 	rsb	r5, r4, #32
 8002b68:	fa00 f205 	lsl.w	r2, r0, r5
 8002b6c:	ea4e 0e02 	orr.w	lr, lr, r2
 8002b70:	fa20 f304 	lsr.w	r3, r0, r4
 8002b74:	fa01 f205 	lsl.w	r2, r1, r5
 8002b78:	ea43 0302 	orr.w	r3, r3, r2
 8002b7c:	fa21 f004 	lsr.w	r0, r1, r4
 8002b80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002b84:	fa21 f204 	lsr.w	r2, r1, r4
 8002b88:	ea20 0002 	bic.w	r0, r0, r2
 8002b8c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8002b90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002b94:	bf08      	it	eq
 8002b96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002b9a:	bd70      	pop	{r4, r5, r6, pc}
 8002b9c:	f094 0f00 	teq	r4, #0
 8002ba0:	d10f      	bne.n	8002bc2 <__aeabi_dmul+0x1c2>
 8002ba2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8002ba6:	0040      	lsls	r0, r0, #1
 8002ba8:	eb41 0101 	adc.w	r1, r1, r1
 8002bac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002bb0:	bf08      	it	eq
 8002bb2:	3c01      	subeq	r4, #1
 8002bb4:	d0f7      	beq.n	8002ba6 <__aeabi_dmul+0x1a6>
 8002bb6:	ea41 0106 	orr.w	r1, r1, r6
 8002bba:	f095 0f00 	teq	r5, #0
 8002bbe:	bf18      	it	ne
 8002bc0:	4770      	bxne	lr
 8002bc2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8002bc6:	0052      	lsls	r2, r2, #1
 8002bc8:	eb43 0303 	adc.w	r3, r3, r3
 8002bcc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002bd0:	bf08      	it	eq
 8002bd2:	3d01      	subeq	r5, #1
 8002bd4:	d0f7      	beq.n	8002bc6 <__aeabi_dmul+0x1c6>
 8002bd6:	ea43 0306 	orr.w	r3, r3, r6
 8002bda:	4770      	bx	lr
 8002bdc:	ea94 0f0c 	teq	r4, ip
 8002be0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002be4:	bf18      	it	ne
 8002be6:	ea95 0f0c 	teqne	r5, ip
 8002bea:	d00c      	beq.n	8002c06 <__aeabi_dmul+0x206>
 8002bec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002bf0:	bf18      	it	ne
 8002bf2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002bf6:	d1d1      	bne.n	8002b9c <__aeabi_dmul+0x19c>
 8002bf8:	ea81 0103 	eor.w	r1, r1, r3
 8002bfc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002c00:	f04f 0000 	mov.w	r0, #0
 8002c04:	bd70      	pop	{r4, r5, r6, pc}
 8002c06:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002c0a:	bf06      	itte	eq
 8002c0c:	4610      	moveq	r0, r2
 8002c0e:	4619      	moveq	r1, r3
 8002c10:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002c14:	d019      	beq.n	8002c4a <__aeabi_dmul+0x24a>
 8002c16:	ea94 0f0c 	teq	r4, ip
 8002c1a:	d102      	bne.n	8002c22 <__aeabi_dmul+0x222>
 8002c1c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8002c20:	d113      	bne.n	8002c4a <__aeabi_dmul+0x24a>
 8002c22:	ea95 0f0c 	teq	r5, ip
 8002c26:	d105      	bne.n	8002c34 <__aeabi_dmul+0x234>
 8002c28:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8002c2c:	bf1c      	itt	ne
 8002c2e:	4610      	movne	r0, r2
 8002c30:	4619      	movne	r1, r3
 8002c32:	d10a      	bne.n	8002c4a <__aeabi_dmul+0x24a>
 8002c34:	ea81 0103 	eor.w	r1, r1, r3
 8002c38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002c3c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002c40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002c44:	f04f 0000 	mov.w	r0, #0
 8002c48:	bd70      	pop	{r4, r5, r6, pc}
 8002c4a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002c4e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8002c52:	bd70      	pop	{r4, r5, r6, pc}

08002c54 <__aeabi_ddiv>:
 8002c54:	b570      	push	{r4, r5, r6, lr}
 8002c56:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002c5a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002c5e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002c62:	bf1d      	ittte	ne
 8002c64:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002c68:	ea94 0f0c 	teqne	r4, ip
 8002c6c:	ea95 0f0c 	teqne	r5, ip
 8002c70:	f000 f8a7 	bleq	8002dc2 <__aeabi_ddiv+0x16e>
 8002c74:	eba4 0405 	sub.w	r4, r4, r5
 8002c78:	ea81 0e03 	eor.w	lr, r1, r3
 8002c7c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002c80:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002c84:	f000 8088 	beq.w	8002d98 <__aeabi_ddiv+0x144>
 8002c88:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002c8c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8002c90:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8002c94:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8002c98:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002c9c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8002ca0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8002ca4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8002ca8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8002cac:	429d      	cmp	r5, r3
 8002cae:	bf08      	it	eq
 8002cb0:	4296      	cmpeq	r6, r2
 8002cb2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8002cb6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8002cba:	d202      	bcs.n	8002cc2 <__aeabi_ddiv+0x6e>
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	ea4f 0232 	mov.w	r2, r2, rrx
 8002cc2:	1ab6      	subs	r6, r6, r2
 8002cc4:	eb65 0503 	sbc.w	r5, r5, r3
 8002cc8:	085b      	lsrs	r3, r3, #1
 8002cca:	ea4f 0232 	mov.w	r2, r2, rrx
 8002cce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002cd2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8002cd6:	ebb6 0e02 	subs.w	lr, r6, r2
 8002cda:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002cde:	bf22      	ittt	cs
 8002ce0:	1ab6      	subcs	r6, r6, r2
 8002ce2:	4675      	movcs	r5, lr
 8002ce4:	ea40 000c 	orrcs.w	r0, r0, ip
 8002ce8:	085b      	lsrs	r3, r3, #1
 8002cea:	ea4f 0232 	mov.w	r2, r2, rrx
 8002cee:	ebb6 0e02 	subs.w	lr, r6, r2
 8002cf2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002cf6:	bf22      	ittt	cs
 8002cf8:	1ab6      	subcs	r6, r6, r2
 8002cfa:	4675      	movcs	r5, lr
 8002cfc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002d00:	085b      	lsrs	r3, r3, #1
 8002d02:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d06:	ebb6 0e02 	subs.w	lr, r6, r2
 8002d0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002d0e:	bf22      	ittt	cs
 8002d10:	1ab6      	subcs	r6, r6, r2
 8002d12:	4675      	movcs	r5, lr
 8002d14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002d18:	085b      	lsrs	r3, r3, #1
 8002d1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8002d22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002d26:	bf22      	ittt	cs
 8002d28:	1ab6      	subcs	r6, r6, r2
 8002d2a:	4675      	movcs	r5, lr
 8002d2c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8002d30:	ea55 0e06 	orrs.w	lr, r5, r6
 8002d34:	d018      	beq.n	8002d68 <__aeabi_ddiv+0x114>
 8002d36:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8002d3a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8002d3e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8002d42:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002d46:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8002d4a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8002d4e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8002d52:	d1c0      	bne.n	8002cd6 <__aeabi_ddiv+0x82>
 8002d54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002d58:	d10b      	bne.n	8002d72 <__aeabi_ddiv+0x11e>
 8002d5a:	ea41 0100 	orr.w	r1, r1, r0
 8002d5e:	f04f 0000 	mov.w	r0, #0
 8002d62:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8002d66:	e7b6      	b.n	8002cd6 <__aeabi_ddiv+0x82>
 8002d68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002d6c:	bf04      	itt	eq
 8002d6e:	4301      	orreq	r1, r0
 8002d70:	2000      	moveq	r0, #0
 8002d72:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002d76:	bf88      	it	hi
 8002d78:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002d7c:	f63f aeaf 	bhi.w	8002ade <__aeabi_dmul+0xde>
 8002d80:	ebb5 0c03 	subs.w	ip, r5, r3
 8002d84:	bf04      	itt	eq
 8002d86:	ebb6 0c02 	subseq.w	ip, r6, r2
 8002d8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002d8e:	f150 0000 	adcs.w	r0, r0, #0
 8002d92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002d96:	bd70      	pop	{r4, r5, r6, pc}
 8002d98:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8002d9c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8002da0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8002da4:	bfc2      	ittt	gt
 8002da6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002daa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002dae:	bd70      	popgt	{r4, r5, r6, pc}
 8002db0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002db4:	f04f 0e00 	mov.w	lr, #0
 8002db8:	3c01      	subs	r4, #1
 8002dba:	e690      	b.n	8002ade <__aeabi_dmul+0xde>
 8002dbc:	ea45 0e06 	orr.w	lr, r5, r6
 8002dc0:	e68d      	b.n	8002ade <__aeabi_dmul+0xde>
 8002dc2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002dc6:	ea94 0f0c 	teq	r4, ip
 8002dca:	bf08      	it	eq
 8002dcc:	ea95 0f0c 	teqeq	r5, ip
 8002dd0:	f43f af3b 	beq.w	8002c4a <__aeabi_dmul+0x24a>
 8002dd4:	ea94 0f0c 	teq	r4, ip
 8002dd8:	d10a      	bne.n	8002df0 <__aeabi_ddiv+0x19c>
 8002dda:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002dde:	f47f af34 	bne.w	8002c4a <__aeabi_dmul+0x24a>
 8002de2:	ea95 0f0c 	teq	r5, ip
 8002de6:	f47f af25 	bne.w	8002c34 <__aeabi_dmul+0x234>
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	e72c      	b.n	8002c4a <__aeabi_dmul+0x24a>
 8002df0:	ea95 0f0c 	teq	r5, ip
 8002df4:	d106      	bne.n	8002e04 <__aeabi_ddiv+0x1b0>
 8002df6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002dfa:	f43f aefd 	beq.w	8002bf8 <__aeabi_dmul+0x1f8>
 8002dfe:	4610      	mov	r0, r2
 8002e00:	4619      	mov	r1, r3
 8002e02:	e722      	b.n	8002c4a <__aeabi_dmul+0x24a>
 8002e04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002e08:	bf18      	it	ne
 8002e0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002e0e:	f47f aec5 	bne.w	8002b9c <__aeabi_dmul+0x19c>
 8002e12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8002e16:	f47f af0d 	bne.w	8002c34 <__aeabi_dmul+0x234>
 8002e1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8002e1e:	f47f aeeb 	bne.w	8002bf8 <__aeabi_dmul+0x1f8>
 8002e22:	e712      	b.n	8002c4a <__aeabi_dmul+0x24a>

08002e24 <__gedf2>:
 8002e24:	f04f 3cff 	mov.w	ip, #4294967295
 8002e28:	e006      	b.n	8002e38 <__cmpdf2+0x4>
 8002e2a:	bf00      	nop

08002e2c <__ledf2>:
 8002e2c:	f04f 0c01 	mov.w	ip, #1
 8002e30:	e002      	b.n	8002e38 <__cmpdf2+0x4>
 8002e32:	bf00      	nop

08002e34 <__cmpdf2>:
 8002e34:	f04f 0c01 	mov.w	ip, #1
 8002e38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002e3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002e40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002e44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002e48:	bf18      	it	ne
 8002e4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8002e4e:	d01b      	beq.n	8002e88 <__cmpdf2+0x54>
 8002e50:	b001      	add	sp, #4
 8002e52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8002e56:	bf0c      	ite	eq
 8002e58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8002e5c:	ea91 0f03 	teqne	r1, r3
 8002e60:	bf02      	ittt	eq
 8002e62:	ea90 0f02 	teqeq	r0, r2
 8002e66:	2000      	moveq	r0, #0
 8002e68:	4770      	bxeq	lr
 8002e6a:	f110 0f00 	cmn.w	r0, #0
 8002e6e:	ea91 0f03 	teq	r1, r3
 8002e72:	bf58      	it	pl
 8002e74:	4299      	cmppl	r1, r3
 8002e76:	bf08      	it	eq
 8002e78:	4290      	cmpeq	r0, r2
 8002e7a:	bf2c      	ite	cs
 8002e7c:	17d8      	asrcs	r0, r3, #31
 8002e7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8002e82:	f040 0001 	orr.w	r0, r0, #1
 8002e86:	4770      	bx	lr
 8002e88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002e8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002e90:	d102      	bne.n	8002e98 <__cmpdf2+0x64>
 8002e92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002e96:	d107      	bne.n	8002ea8 <__cmpdf2+0x74>
 8002e98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002e9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002ea0:	d1d6      	bne.n	8002e50 <__cmpdf2+0x1c>
 8002ea2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002ea6:	d0d3      	beq.n	8002e50 <__cmpdf2+0x1c>
 8002ea8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop

08002eb0 <__aeabi_cdrcmple>:
 8002eb0:	4684      	mov	ip, r0
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4662      	mov	r2, ip
 8002eb6:	468c      	mov	ip, r1
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4663      	mov	r3, ip
 8002ebc:	e000      	b.n	8002ec0 <__aeabi_cdcmpeq>
 8002ebe:	bf00      	nop

08002ec0 <__aeabi_cdcmpeq>:
 8002ec0:	b501      	push	{r0, lr}
 8002ec2:	f7ff ffb7 	bl	8002e34 <__cmpdf2>
 8002ec6:	2800      	cmp	r0, #0
 8002ec8:	bf48      	it	mi
 8002eca:	f110 0f00 	cmnmi.w	r0, #0
 8002ece:	bd01      	pop	{r0, pc}

08002ed0 <__aeabi_dcmpeq>:
 8002ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002ed4:	f7ff fff4 	bl	8002ec0 <__aeabi_cdcmpeq>
 8002ed8:	bf0c      	ite	eq
 8002eda:	2001      	moveq	r0, #1
 8002edc:	2000      	movne	r0, #0
 8002ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8002ee2:	bf00      	nop

08002ee4 <__aeabi_dcmplt>:
 8002ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002ee8:	f7ff ffea 	bl	8002ec0 <__aeabi_cdcmpeq>
 8002eec:	bf34      	ite	cc
 8002eee:	2001      	movcc	r0, #1
 8002ef0:	2000      	movcs	r0, #0
 8002ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8002ef6:	bf00      	nop

08002ef8 <__aeabi_dcmple>:
 8002ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002efc:	f7ff ffe0 	bl	8002ec0 <__aeabi_cdcmpeq>
 8002f00:	bf94      	ite	ls
 8002f02:	2001      	movls	r0, #1
 8002f04:	2000      	movhi	r0, #0
 8002f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f0a:	bf00      	nop

08002f0c <__aeabi_dcmpge>:
 8002f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f10:	f7ff ffce 	bl	8002eb0 <__aeabi_cdrcmple>
 8002f14:	bf94      	ite	ls
 8002f16:	2001      	movls	r0, #1
 8002f18:	2000      	movhi	r0, #0
 8002f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f1e:	bf00      	nop

08002f20 <__aeabi_dcmpgt>:
 8002f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f24:	f7ff ffc4 	bl	8002eb0 <__aeabi_cdrcmple>
 8002f28:	bf34      	ite	cc
 8002f2a:	2001      	movcc	r0, #1
 8002f2c:	2000      	movcs	r0, #0
 8002f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f32:	bf00      	nop

08002f34 <__aeabi_d2f>:
 8002f34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002f38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8002f3c:	bf24      	itt	cs
 8002f3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8002f42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8002f46:	d90d      	bls.n	8002f64 <__aeabi_d2f+0x30>
 8002f48:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8002f4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8002f50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8002f54:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002f58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8002f5c:	bf08      	it	eq
 8002f5e:	f020 0001 	biceq.w	r0, r0, #1
 8002f62:	4770      	bx	lr
 8002f64:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8002f68:	d121      	bne.n	8002fae <__aeabi_d2f+0x7a>
 8002f6a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8002f6e:	bfbc      	itt	lt
 8002f70:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8002f74:	4770      	bxlt	lr
 8002f76:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002f7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8002f7e:	f1c2 0218 	rsb	r2, r2, #24
 8002f82:	f1c2 0c20 	rsb	ip, r2, #32
 8002f86:	fa10 f30c 	lsls.w	r3, r0, ip
 8002f8a:	fa20 f002 	lsr.w	r0, r0, r2
 8002f8e:	bf18      	it	ne
 8002f90:	f040 0001 	orrne.w	r0, r0, #1
 8002f94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002f98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8002f9c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8002fa0:	ea40 000c 	orr.w	r0, r0, ip
 8002fa4:	fa23 f302 	lsr.w	r3, r3, r2
 8002fa8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002fac:	e7cc      	b.n	8002f48 <__aeabi_d2f+0x14>
 8002fae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8002fb2:	d107      	bne.n	8002fc4 <__aeabi_d2f+0x90>
 8002fb4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8002fb8:	bf1e      	ittt	ne
 8002fba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8002fbe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8002fc2:	4770      	bxne	lr
 8002fc4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8002fc8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8002fcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop

08002fd4 <__aeabi_frsub>:
 8002fd4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8002fd8:	e002      	b.n	8002fe0 <__addsf3>
 8002fda:	bf00      	nop

08002fdc <__aeabi_fsub>:
 8002fdc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08002fe0 <__addsf3>:
 8002fe0:	0042      	lsls	r2, r0, #1
 8002fe2:	bf1f      	itttt	ne
 8002fe4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8002fe8:	ea92 0f03 	teqne	r2, r3
 8002fec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8002ff0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8002ff4:	d06a      	beq.n	80030cc <__addsf3+0xec>
 8002ff6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8002ffa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8002ffe:	bfc1      	itttt	gt
 8003000:	18d2      	addgt	r2, r2, r3
 8003002:	4041      	eorgt	r1, r0
 8003004:	4048      	eorgt	r0, r1
 8003006:	4041      	eorgt	r1, r0
 8003008:	bfb8      	it	lt
 800300a:	425b      	neglt	r3, r3
 800300c:	2b19      	cmp	r3, #25
 800300e:	bf88      	it	hi
 8003010:	4770      	bxhi	lr
 8003012:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8003016:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800301a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800301e:	bf18      	it	ne
 8003020:	4240      	negne	r0, r0
 8003022:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003026:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800302a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800302e:	bf18      	it	ne
 8003030:	4249      	negne	r1, r1
 8003032:	ea92 0f03 	teq	r2, r3
 8003036:	d03f      	beq.n	80030b8 <__addsf3+0xd8>
 8003038:	f1a2 0201 	sub.w	r2, r2, #1
 800303c:	fa41 fc03 	asr.w	ip, r1, r3
 8003040:	eb10 000c 	adds.w	r0, r0, ip
 8003044:	f1c3 0320 	rsb	r3, r3, #32
 8003048:	fa01 f103 	lsl.w	r1, r1, r3
 800304c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8003050:	d502      	bpl.n	8003058 <__addsf3+0x78>
 8003052:	4249      	negs	r1, r1
 8003054:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8003058:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800305c:	d313      	bcc.n	8003086 <__addsf3+0xa6>
 800305e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003062:	d306      	bcc.n	8003072 <__addsf3+0x92>
 8003064:	0840      	lsrs	r0, r0, #1
 8003066:	ea4f 0131 	mov.w	r1, r1, rrx
 800306a:	f102 0201 	add.w	r2, r2, #1
 800306e:	2afe      	cmp	r2, #254	; 0xfe
 8003070:	d251      	bcs.n	8003116 <__addsf3+0x136>
 8003072:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8003076:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800307a:	bf08      	it	eq
 800307c:	f020 0001 	biceq.w	r0, r0, #1
 8003080:	ea40 0003 	orr.w	r0, r0, r3
 8003084:	4770      	bx	lr
 8003086:	0049      	lsls	r1, r1, #1
 8003088:	eb40 0000 	adc.w	r0, r0, r0
 800308c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8003090:	f1a2 0201 	sub.w	r2, r2, #1
 8003094:	d1ed      	bne.n	8003072 <__addsf3+0x92>
 8003096:	fab0 fc80 	clz	ip, r0
 800309a:	f1ac 0c08 	sub.w	ip, ip, #8
 800309e:	ebb2 020c 	subs.w	r2, r2, ip
 80030a2:	fa00 f00c 	lsl.w	r0, r0, ip
 80030a6:	bfaa      	itet	ge
 80030a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80030ac:	4252      	neglt	r2, r2
 80030ae:	4318      	orrge	r0, r3
 80030b0:	bfbc      	itt	lt
 80030b2:	40d0      	lsrlt	r0, r2
 80030b4:	4318      	orrlt	r0, r3
 80030b6:	4770      	bx	lr
 80030b8:	f092 0f00 	teq	r2, #0
 80030bc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80030c0:	bf06      	itte	eq
 80030c2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80030c6:	3201      	addeq	r2, #1
 80030c8:	3b01      	subne	r3, #1
 80030ca:	e7b5      	b.n	8003038 <__addsf3+0x58>
 80030cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80030d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80030d4:	bf18      	it	ne
 80030d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80030da:	d021      	beq.n	8003120 <__addsf3+0x140>
 80030dc:	ea92 0f03 	teq	r2, r3
 80030e0:	d004      	beq.n	80030ec <__addsf3+0x10c>
 80030e2:	f092 0f00 	teq	r2, #0
 80030e6:	bf08      	it	eq
 80030e8:	4608      	moveq	r0, r1
 80030ea:	4770      	bx	lr
 80030ec:	ea90 0f01 	teq	r0, r1
 80030f0:	bf1c      	itt	ne
 80030f2:	2000      	movne	r0, #0
 80030f4:	4770      	bxne	lr
 80030f6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80030fa:	d104      	bne.n	8003106 <__addsf3+0x126>
 80030fc:	0040      	lsls	r0, r0, #1
 80030fe:	bf28      	it	cs
 8003100:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8003104:	4770      	bx	lr
 8003106:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800310a:	bf3c      	itt	cc
 800310c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8003110:	4770      	bxcc	lr
 8003112:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8003116:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800311a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800311e:	4770      	bx	lr
 8003120:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8003124:	bf16      	itet	ne
 8003126:	4608      	movne	r0, r1
 8003128:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800312c:	4601      	movne	r1, r0
 800312e:	0242      	lsls	r2, r0, #9
 8003130:	bf06      	itte	eq
 8003132:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8003136:	ea90 0f01 	teqeq	r0, r1
 800313a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800313e:	4770      	bx	lr

08003140 <__aeabi_ui2f>:
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	e004      	b.n	8003150 <__aeabi_i2f+0x8>
 8003146:	bf00      	nop

08003148 <__aeabi_i2f>:
 8003148:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800314c:	bf48      	it	mi
 800314e:	4240      	negmi	r0, r0
 8003150:	ea5f 0c00 	movs.w	ip, r0
 8003154:	bf08      	it	eq
 8003156:	4770      	bxeq	lr
 8003158:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800315c:	4601      	mov	r1, r0
 800315e:	f04f 0000 	mov.w	r0, #0
 8003162:	e01c      	b.n	800319e <__aeabi_l2f+0x2a>

08003164 <__aeabi_ul2f>:
 8003164:	ea50 0201 	orrs.w	r2, r0, r1
 8003168:	bf08      	it	eq
 800316a:	4770      	bxeq	lr
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	e00a      	b.n	8003188 <__aeabi_l2f+0x14>
 8003172:	bf00      	nop

08003174 <__aeabi_l2f>:
 8003174:	ea50 0201 	orrs.w	r2, r0, r1
 8003178:	bf08      	it	eq
 800317a:	4770      	bxeq	lr
 800317c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8003180:	d502      	bpl.n	8003188 <__aeabi_l2f+0x14>
 8003182:	4240      	negs	r0, r0
 8003184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003188:	ea5f 0c01 	movs.w	ip, r1
 800318c:	bf02      	ittt	eq
 800318e:	4684      	moveq	ip, r0
 8003190:	4601      	moveq	r1, r0
 8003192:	2000      	moveq	r0, #0
 8003194:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8003198:	bf08      	it	eq
 800319a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800319e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80031a2:	fabc f28c 	clz	r2, ip
 80031a6:	3a08      	subs	r2, #8
 80031a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80031ac:	db10      	blt.n	80031d0 <__aeabi_l2f+0x5c>
 80031ae:	fa01 fc02 	lsl.w	ip, r1, r2
 80031b2:	4463      	add	r3, ip
 80031b4:	fa00 fc02 	lsl.w	ip, r0, r2
 80031b8:	f1c2 0220 	rsb	r2, r2, #32
 80031bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80031c0:	fa20 f202 	lsr.w	r2, r0, r2
 80031c4:	eb43 0002 	adc.w	r0, r3, r2
 80031c8:	bf08      	it	eq
 80031ca:	f020 0001 	biceq.w	r0, r0, #1
 80031ce:	4770      	bx	lr
 80031d0:	f102 0220 	add.w	r2, r2, #32
 80031d4:	fa01 fc02 	lsl.w	ip, r1, r2
 80031d8:	f1c2 0220 	rsb	r2, r2, #32
 80031dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80031e0:	fa21 f202 	lsr.w	r2, r1, r2
 80031e4:	eb43 0002 	adc.w	r0, r3, r2
 80031e8:	bf08      	it	eq
 80031ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80031ee:	4770      	bx	lr

080031f0 <__aeabi_fmul>:
 80031f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80031f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80031f8:	bf1e      	ittt	ne
 80031fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80031fe:	ea92 0f0c 	teqne	r2, ip
 8003202:	ea93 0f0c 	teqne	r3, ip
 8003206:	d06f      	beq.n	80032e8 <__aeabi_fmul+0xf8>
 8003208:	441a      	add	r2, r3
 800320a:	ea80 0c01 	eor.w	ip, r0, r1
 800320e:	0240      	lsls	r0, r0, #9
 8003210:	bf18      	it	ne
 8003212:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8003216:	d01e      	beq.n	8003256 <__aeabi_fmul+0x66>
 8003218:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800321c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8003220:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8003224:	fba0 3101 	umull	r3, r1, r0, r1
 8003228:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800322c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8003230:	bf3e      	ittt	cc
 8003232:	0049      	lslcc	r1, r1, #1
 8003234:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8003238:	005b      	lslcc	r3, r3, #1
 800323a:	ea40 0001 	orr.w	r0, r0, r1
 800323e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8003242:	2afd      	cmp	r2, #253	; 0xfd
 8003244:	d81d      	bhi.n	8003282 <__aeabi_fmul+0x92>
 8003246:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800324a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800324e:	bf08      	it	eq
 8003250:	f020 0001 	biceq.w	r0, r0, #1
 8003254:	4770      	bx	lr
 8003256:	f090 0f00 	teq	r0, #0
 800325a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800325e:	bf08      	it	eq
 8003260:	0249      	lsleq	r1, r1, #9
 8003262:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8003266:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800326a:	3a7f      	subs	r2, #127	; 0x7f
 800326c:	bfc2      	ittt	gt
 800326e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8003272:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8003276:	4770      	bxgt	lr
 8003278:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	3a01      	subs	r2, #1
 8003282:	dc5d      	bgt.n	8003340 <__aeabi_fmul+0x150>
 8003284:	f112 0f19 	cmn.w	r2, #25
 8003288:	bfdc      	itt	le
 800328a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800328e:	4770      	bxle	lr
 8003290:	f1c2 0200 	rsb	r2, r2, #0
 8003294:	0041      	lsls	r1, r0, #1
 8003296:	fa21 f102 	lsr.w	r1, r1, r2
 800329a:	f1c2 0220 	rsb	r2, r2, #32
 800329e:	fa00 fc02 	lsl.w	ip, r0, r2
 80032a2:	ea5f 0031 	movs.w	r0, r1, rrx
 80032a6:	f140 0000 	adc.w	r0, r0, #0
 80032aa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80032ae:	bf08      	it	eq
 80032b0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80032b4:	4770      	bx	lr
 80032b6:	f092 0f00 	teq	r2, #0
 80032ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80032be:	bf02      	ittt	eq
 80032c0:	0040      	lsleq	r0, r0, #1
 80032c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80032c6:	3a01      	subeq	r2, #1
 80032c8:	d0f9      	beq.n	80032be <__aeabi_fmul+0xce>
 80032ca:	ea40 000c 	orr.w	r0, r0, ip
 80032ce:	f093 0f00 	teq	r3, #0
 80032d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80032d6:	bf02      	ittt	eq
 80032d8:	0049      	lsleq	r1, r1, #1
 80032da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80032de:	3b01      	subeq	r3, #1
 80032e0:	d0f9      	beq.n	80032d6 <__aeabi_fmul+0xe6>
 80032e2:	ea41 010c 	orr.w	r1, r1, ip
 80032e6:	e78f      	b.n	8003208 <__aeabi_fmul+0x18>
 80032e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80032ec:	ea92 0f0c 	teq	r2, ip
 80032f0:	bf18      	it	ne
 80032f2:	ea93 0f0c 	teqne	r3, ip
 80032f6:	d00a      	beq.n	800330e <__aeabi_fmul+0x11e>
 80032f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80032fc:	bf18      	it	ne
 80032fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8003302:	d1d8      	bne.n	80032b6 <__aeabi_fmul+0xc6>
 8003304:	ea80 0001 	eor.w	r0, r0, r1
 8003308:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800330c:	4770      	bx	lr
 800330e:	f090 0f00 	teq	r0, #0
 8003312:	bf17      	itett	ne
 8003314:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8003318:	4608      	moveq	r0, r1
 800331a:	f091 0f00 	teqne	r1, #0
 800331e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8003322:	d014      	beq.n	800334e <__aeabi_fmul+0x15e>
 8003324:	ea92 0f0c 	teq	r2, ip
 8003328:	d101      	bne.n	800332e <__aeabi_fmul+0x13e>
 800332a:	0242      	lsls	r2, r0, #9
 800332c:	d10f      	bne.n	800334e <__aeabi_fmul+0x15e>
 800332e:	ea93 0f0c 	teq	r3, ip
 8003332:	d103      	bne.n	800333c <__aeabi_fmul+0x14c>
 8003334:	024b      	lsls	r3, r1, #9
 8003336:	bf18      	it	ne
 8003338:	4608      	movne	r0, r1
 800333a:	d108      	bne.n	800334e <__aeabi_fmul+0x15e>
 800333c:	ea80 0001 	eor.w	r0, r0, r1
 8003340:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8003344:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8003348:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800334c:	4770      	bx	lr
 800334e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8003352:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8003356:	4770      	bx	lr

08003358 <__aeabi_fdiv>:
 8003358:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800335c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8003360:	bf1e      	ittt	ne
 8003362:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8003366:	ea92 0f0c 	teqne	r2, ip
 800336a:	ea93 0f0c 	teqne	r3, ip
 800336e:	d069      	beq.n	8003444 <__aeabi_fdiv+0xec>
 8003370:	eba2 0203 	sub.w	r2, r2, r3
 8003374:	ea80 0c01 	eor.w	ip, r0, r1
 8003378:	0249      	lsls	r1, r1, #9
 800337a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800337e:	d037      	beq.n	80033f0 <__aeabi_fdiv+0x98>
 8003380:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003384:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8003388:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800338c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8003390:	428b      	cmp	r3, r1
 8003392:	bf38      	it	cc
 8003394:	005b      	lslcc	r3, r3, #1
 8003396:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800339a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800339e:	428b      	cmp	r3, r1
 80033a0:	bf24      	itt	cs
 80033a2:	1a5b      	subcs	r3, r3, r1
 80033a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80033a8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80033ac:	bf24      	itt	cs
 80033ae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80033b2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80033b6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80033ba:	bf24      	itt	cs
 80033bc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80033c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80033c4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80033c8:	bf24      	itt	cs
 80033ca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80033ce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	bf18      	it	ne
 80033d6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80033da:	d1e0      	bne.n	800339e <__aeabi_fdiv+0x46>
 80033dc:	2afd      	cmp	r2, #253	; 0xfd
 80033de:	f63f af50 	bhi.w	8003282 <__aeabi_fmul+0x92>
 80033e2:	428b      	cmp	r3, r1
 80033e4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80033e8:	bf08      	it	eq
 80033ea:	f020 0001 	biceq.w	r0, r0, #1
 80033ee:	4770      	bx	lr
 80033f0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80033f4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80033f8:	327f      	adds	r2, #127	; 0x7f
 80033fa:	bfc2      	ittt	gt
 80033fc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8003400:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8003404:	4770      	bxgt	lr
 8003406:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	3a01      	subs	r2, #1
 8003410:	e737      	b.n	8003282 <__aeabi_fmul+0x92>
 8003412:	f092 0f00 	teq	r2, #0
 8003416:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800341a:	bf02      	ittt	eq
 800341c:	0040      	lsleq	r0, r0, #1
 800341e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8003422:	3a01      	subeq	r2, #1
 8003424:	d0f9      	beq.n	800341a <__aeabi_fdiv+0xc2>
 8003426:	ea40 000c 	orr.w	r0, r0, ip
 800342a:	f093 0f00 	teq	r3, #0
 800342e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8003432:	bf02      	ittt	eq
 8003434:	0049      	lsleq	r1, r1, #1
 8003436:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800343a:	3b01      	subeq	r3, #1
 800343c:	d0f9      	beq.n	8003432 <__aeabi_fdiv+0xda>
 800343e:	ea41 010c 	orr.w	r1, r1, ip
 8003442:	e795      	b.n	8003370 <__aeabi_fdiv+0x18>
 8003444:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8003448:	ea92 0f0c 	teq	r2, ip
 800344c:	d108      	bne.n	8003460 <__aeabi_fdiv+0x108>
 800344e:	0242      	lsls	r2, r0, #9
 8003450:	f47f af7d 	bne.w	800334e <__aeabi_fmul+0x15e>
 8003454:	ea93 0f0c 	teq	r3, ip
 8003458:	f47f af70 	bne.w	800333c <__aeabi_fmul+0x14c>
 800345c:	4608      	mov	r0, r1
 800345e:	e776      	b.n	800334e <__aeabi_fmul+0x15e>
 8003460:	ea93 0f0c 	teq	r3, ip
 8003464:	d104      	bne.n	8003470 <__aeabi_fdiv+0x118>
 8003466:	024b      	lsls	r3, r1, #9
 8003468:	f43f af4c 	beq.w	8003304 <__aeabi_fmul+0x114>
 800346c:	4608      	mov	r0, r1
 800346e:	e76e      	b.n	800334e <__aeabi_fmul+0x15e>
 8003470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8003474:	bf18      	it	ne
 8003476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800347a:	d1ca      	bne.n	8003412 <__aeabi_fdiv+0xba>
 800347c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8003480:	f47f af5c 	bne.w	800333c <__aeabi_fmul+0x14c>
 8003484:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8003488:	f47f af3c 	bne.w	8003304 <__aeabi_fmul+0x114>
 800348c:	e75f      	b.n	800334e <__aeabi_fmul+0x15e>
 800348e:	bf00      	nop

08003490 <__gesf2>:
 8003490:	f04f 3cff 	mov.w	ip, #4294967295
 8003494:	e006      	b.n	80034a4 <__cmpsf2+0x4>
 8003496:	bf00      	nop

08003498 <__lesf2>:
 8003498:	f04f 0c01 	mov.w	ip, #1
 800349c:	e002      	b.n	80034a4 <__cmpsf2+0x4>
 800349e:	bf00      	nop

080034a0 <__cmpsf2>:
 80034a0:	f04f 0c01 	mov.w	ip, #1
 80034a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80034a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80034ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80034b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80034b4:	bf18      	it	ne
 80034b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80034ba:	d011      	beq.n	80034e0 <__cmpsf2+0x40>
 80034bc:	b001      	add	sp, #4
 80034be:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80034c2:	bf18      	it	ne
 80034c4:	ea90 0f01 	teqne	r0, r1
 80034c8:	bf58      	it	pl
 80034ca:	ebb2 0003 	subspl.w	r0, r2, r3
 80034ce:	bf88      	it	hi
 80034d0:	17c8      	asrhi	r0, r1, #31
 80034d2:	bf38      	it	cc
 80034d4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80034d8:	bf18      	it	ne
 80034da:	f040 0001 	orrne.w	r0, r0, #1
 80034de:	4770      	bx	lr
 80034e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80034e4:	d102      	bne.n	80034ec <__cmpsf2+0x4c>
 80034e6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80034ea:	d105      	bne.n	80034f8 <__cmpsf2+0x58>
 80034ec:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80034f0:	d1e4      	bne.n	80034bc <__cmpsf2+0x1c>
 80034f2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80034f6:	d0e1      	beq.n	80034bc <__cmpsf2+0x1c>
 80034f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop

08003500 <__aeabi_cfrcmple>:
 8003500:	4684      	mov	ip, r0
 8003502:	4608      	mov	r0, r1
 8003504:	4661      	mov	r1, ip
 8003506:	e7ff      	b.n	8003508 <__aeabi_cfcmpeq>

08003508 <__aeabi_cfcmpeq>:
 8003508:	b50f      	push	{r0, r1, r2, r3, lr}
 800350a:	f7ff ffc9 	bl	80034a0 <__cmpsf2>
 800350e:	2800      	cmp	r0, #0
 8003510:	bf48      	it	mi
 8003512:	f110 0f00 	cmnmi.w	r0, #0
 8003516:	bd0f      	pop	{r0, r1, r2, r3, pc}

08003518 <__aeabi_fcmpeq>:
 8003518:	f84d ed08 	str.w	lr, [sp, #-8]!
 800351c:	f7ff fff4 	bl	8003508 <__aeabi_cfcmpeq>
 8003520:	bf0c      	ite	eq
 8003522:	2001      	moveq	r0, #1
 8003524:	2000      	movne	r0, #0
 8003526:	f85d fb08 	ldr.w	pc, [sp], #8
 800352a:	bf00      	nop

0800352c <__aeabi_fcmplt>:
 800352c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003530:	f7ff ffea 	bl	8003508 <__aeabi_cfcmpeq>
 8003534:	bf34      	ite	cc
 8003536:	2001      	movcc	r0, #1
 8003538:	2000      	movcs	r0, #0
 800353a:	f85d fb08 	ldr.w	pc, [sp], #8
 800353e:	bf00      	nop

08003540 <__aeabi_fcmple>:
 8003540:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003544:	f7ff ffe0 	bl	8003508 <__aeabi_cfcmpeq>
 8003548:	bf94      	ite	ls
 800354a:	2001      	movls	r0, #1
 800354c:	2000      	movhi	r0, #0
 800354e:	f85d fb08 	ldr.w	pc, [sp], #8
 8003552:	bf00      	nop

08003554 <__aeabi_fcmpge>:
 8003554:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003558:	f7ff ffd2 	bl	8003500 <__aeabi_cfrcmple>
 800355c:	bf94      	ite	ls
 800355e:	2001      	movls	r0, #1
 8003560:	2000      	movhi	r0, #0
 8003562:	f85d fb08 	ldr.w	pc, [sp], #8
 8003566:	bf00      	nop

08003568 <__aeabi_fcmpgt>:
 8003568:	f84d ed08 	str.w	lr, [sp, #-8]!
 800356c:	f7ff ffc8 	bl	8003500 <__aeabi_cfrcmple>
 8003570:	bf34      	ite	cc
 8003572:	2001      	movcc	r0, #1
 8003574:	2000      	movcs	r0, #0
 8003576:	f85d fb08 	ldr.w	pc, [sp], #8
 800357a:	bf00      	nop

0800357c <__aeabi_f2uiz>:
 800357c:	0042      	lsls	r2, r0, #1
 800357e:	d20e      	bcs.n	800359e <__aeabi_f2uiz+0x22>
 8003580:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8003584:	d30b      	bcc.n	800359e <__aeabi_f2uiz+0x22>
 8003586:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800358a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800358e:	d409      	bmi.n	80035a4 <__aeabi_f2uiz+0x28>
 8003590:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8003594:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003598:	fa23 f002 	lsr.w	r0, r3, r2
 800359c:	4770      	bx	lr
 800359e:	f04f 0000 	mov.w	r0, #0
 80035a2:	4770      	bx	lr
 80035a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80035a8:	d101      	bne.n	80035ae <__aeabi_f2uiz+0x32>
 80035aa:	0242      	lsls	r2, r0, #9
 80035ac:	d102      	bne.n	80035b4 <__aeabi_f2uiz+0x38>
 80035ae:	f04f 30ff 	mov.w	r0, #4294967295
 80035b2:	4770      	bx	lr
 80035b4:	f04f 0000 	mov.w	r0, #0
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop

080035bc <__errno>:
 80035bc:	f240 031c 	movw	r3, #28
 80035c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	4770      	bx	lr

080035c8 <NL2>:
 80035c8:	0003 0000                                   ....

080035cc <NUM2>:
 80035cc:	3ffc 0000 8049 ffff 3ffc 0000               .?..I....?..

080035d8 <DL2>:
 80035d8:	0003 0000                                   ....

080035dc <DEN2>:
 80035dc:	4000 0000 8049 ffff 3ff8 0000               .@..I....?..

080035e8 <NL>:
 80035e8:	0001 0000 0003 0000 0001 0000 0003 0000     ................
 80035f8:	0001 0000 0003 0000 0001 0000 0003 0000     ................
 8003608:	0001 0000                                   ....

0800360c <NUM>:
 800360c:	3fb7 0000 0000 0000 0000 0000 4000 0000     .?...........@..
 800361c:	8000 ffff 4000 0000 3f35 0000 0000 0000     .....@..5?......
 800362c:	0000 0000 4000 0000 8000 ffff 4000 0000     .....@.......@..
 800363c:	3ed3 0000 0000 0000 0000 0000 4000 0000     .>...........@..
 800364c:	8000 ffff 4000 0000 3e9f 0000 0000 0000     .....@...>......
 800365c:	0000 0000 4000 0000 8000 ffff 4000 0000     .....@.......@..
 800366c:	4000 0000 0000 0000 0000 0000               .@..........

08003678 <DL>:
 8003678:	0001 0000 0003 0000 0001 0000 0003 0000     ................
 8003688:	0001 0000 0003 0000 0001 0000 0003 0000     ................
 8003698:	0001 0000                                   ....

0800369c <DEN>:
 800369c:	4000 0000 0000 0000 0000 0000 4000 0000     .@...........@..
 80036ac:	8096 ffff 3f72 0000 4000 0000 0000 0000     ....r?...@......
 80036bc:	0000 0000 4000 0000 819a ffff 3e6e 0000     .....@......n>..
 80036cc:	4000 0000 0000 0000 0000 0000 4000 0000     .@...........@..
 80036dc:	825e ffff 3daa 0000 4000 0000 0000 0000     ^....=...@......
 80036ec:	0000 0000 4000 0000 82c7 ffff 3d41 0000     .....@......A=..
 80036fc:	4000 0000 0000 0000 0000 0000 7173 7472     .@..........sqrt
 800370c:	0000 0000 0043 0000                         ....C...

08003714 <_init>:
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003716:	bf00      	nop
 8003718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371a:	bc08      	pop	{r3}
 800371c:	469e      	mov	lr, r3
 800371e:	4770      	bx	lr

08003720 <__init_array_start>:
 8003720:	08000145 	.word	0x08000145

08003724 <_fini>:
 8003724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003726:	bf00      	nop
 8003728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372a:	bc08      	pop	{r3}
 800372c:	469e      	mov	lr, r3
 800372e:	4770      	bx	lr

08003730 <__fini_array_start>:
 8003730:	08000131 	.word	0x08000131
