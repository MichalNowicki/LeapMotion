   1              	# 1 "../Setup/startup.S"
   1              	/******************************************************************************
   0              	
   0              	
   0              	
   2              	* author: Freddie Chopin
   3              	* file: startup.s
   4              	* last change: 2009-09-17
   5              	*
   6              	* chip: STM32F103RB
   7              	* compiler: arm-none-eabi-gcc 4.3.3
   8              	*
   9              	* description:
  10              	* assembly startup file
  11              	******************************************************************************/
  12              	
  13              	/*
  14              	+=============================================================================+
  15              	| includes
  16              	+=============================================================================+
  17              	*/
  18              	
  19              	#include "hdr_special_registers.h"
   1              	/** \file hdr_special_registers.h
   2              	 * \brief Header with definition of bits in special registers in ARMv7-M core
   3              	 * \author Freddie Chopin
   4              	 * \date 2009-09-19
   5              	 */
   6              	
   7              	/******************************************************************************
   8              	* chip: ARM Cortex-M3
   9              	* compiler: arm-none-eabi-gcc 4.3.3
  10              	******************************************************************************/
  11              	
  12              	#ifndef HDR_SPECIAL_REGISTERS_H_
  13              	#define HDR_SPECIAL_REGISTERS_H_
  14              	
  15              	/*
  16              	+-----------------------------------------------------------------------------+
  17              	| PRIMASK - Register to mask out configurable exceptions
  18              	+-----------------------------------------------------------------------------+
  19              	*/
  20              	
  21              	#define PRIMASK_MASK_EXCEPTIONS_bit			0
  22              	
  23              	#define PRIMASK_MASK_EXCEPTIONS				(1 << PRIMASK_MASK_EXCEPTIONS_bit)
  24              	
  25              	/*
  26              	+-----------------------------------------------------------------------------+
  27              	| FAULTMASK - Register to raise priority to the HardFault level
  28              	+-----------------------------------------------------------------------------+
  29              	*/
  30              	
  31              	#define FAULTMASK_MASK_EXCEPTIONS_bit		0
  32              	
  33              	#define FAULTMASK_MASK_EXCEPTIONS			(1 << FAULTMASK_MASK_EXCEPTIONS_bit)
  34              	
  35              	/*
  36              	+-----------------------------------------------------------------------------+
  37              	| CONTROL - The special-purpose control register
  38              	+-----------------------------------------------------------------------------+
  39              	*/
  40              	
  41              	#define CONTROL_THREAD_UNPRIVILEGED_bit		0
  42              	#define CONTROL_ALTERNATE_STACK_bit			1
  43              	
  44              	#define CONTROL_THREAD_UNPRIVILEGED			(1 << CONTROL_THREAD_UNPRIVILEGED_bit)
  45              	#define CONTROL_ALTERNATE_STACK				(1 << CONTROL_ALTERNATE_STACK_bit)
  46              	
  20              	
  21              	/*
  22              	+=============================================================================+
  23              	| startup code
  24              	+=============================================================================+
  25              	*/
  26              	
  27              	.text
  28              	.balign 2
  29              	.syntax unified
  30              	.thumb
  31              	.thumb_func
  32              	.global Reset_Handler
  33              	
  34              	Reset_Handler:
  35              	
  36              	/*
  37              	+-----------------------------------------------------------------------------+
  38              	| Initialize the process stack pointer
  39              	+-----------------------------------------------------------------------------+
  40              	*/
  41              	
  42 0000 0E48     		ldr		r0, =__process_stack_end
  43 0002 80F30988 		msr		PSP, r0
  44              	
  45              	/*
  46              	+-----------------------------------------------------------------------------+
  47              	| Initialize .data section
  48              	+-----------------------------------------------------------------------------+
  49              	*/
  50              	
  51 0006 0E49     		ldr		r1, =__data_init_start
  52 0008 0E4A     	    ldr		r2, =__data_start
  53 000a 0F4B     	    ldr		r3, =__data_end
  54              	
  55 000c 9A42     	1:	cmp		r2, r3
  56 000e 3EBF     		ittt	lo
  57 0010 51F8040B 		ldrlo	r0, [r1], #4
  58 0014 42F8040B 		strlo	r0, [r2], #4
  59 0018 F8E7     		blo		1b
  60              	
  61              	/*
  62              	+-----------------------------------------------------------------------------+
  63              	| Zero-init .bss section
  64              	+-----------------------------------------------------------------------------+
  65              	*/
  66              	
  67 001a 0020     		movs	r0, #0
  68 001c 0B49     		ldr		r1, =__bss_start
  69 001e 0C4A     		ldr		r2, =__bss_end
  70              	
  71 0020 9142     	1:	cmp		r1, r2
  72 0022 3CBF     		itt		lo
  73 0024 41F8040B 		strlo	r0, [r1], #4
  74 0028 FAE7     		blo		1b
  75              	
  76              	/*
  77              	+-----------------------------------------------------------------------------+
  78              	| Thread mode uses process stack (PSP) and is privileged
  79              	+-----------------------------------------------------------------------------+
  80              	*/
  81              	
  82 002a 0220     		movs	r0, #CONTROL_ALTERNATE_STACK
  83 002c 80F31488 		msr		CONTROL, r0
  84 0030 BFF36F8F 		isb
  85              	
  86              	/*
  87              	+-----------------------------------------------------------------------------+
  88              	| Call C++ constructors for global and static objects
  89              	+-----------------------------------------------------------------------------+
  90              	*/
  91              	#ifdef __USES_CPP
  92              		bl		__libc_init_array
  93              	#endif
  94              	
  95              	/*
  96              	+-----------------------------------------------------------------------------+
  97              	| Branch to main() with link
  98              	+-----------------------------------------------------------------------------+
  99              	*/
 100              	
 101 0034 FFF7FEFF 		bl		main
 102              	
 103              	/*
 104              	+-----------------------------------------------------------------------------+
 105              	| Call C++ destructors for global and static objects
 106              	+-----------------------------------------------------------------------------+
 107              	*/
 108              	#ifdef __USES_CPP
 109              		bl		__libc_fini_array
 110              	#endif
 111              	
 112              	/*
 113              	+-----------------------------------------------------------------------------+
 114              	| On return - loop till the end of the world
 115              	+-----------------------------------------------------------------------------+
 116              	*/
 117              	
 118 0038 FEE70000 		b		.
 118      00000000 
 118      00000000 
 118      00000000 
 118      00000000 
DEFINED SYMBOLS
  ../Setup/startup.S:28     .text:00000000 $t
  ../Setup/startup.S:34     .text:00000000 Reset_Handler
  ../Setup/startup.S:118    .text:0000003a $d
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
__process_stack_end
__data_init_start
__data_start
__data_end
__bss_start
__bss_end
main
